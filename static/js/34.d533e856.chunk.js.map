{"version":3,"sources":["views/plans/render/NewPlan.jsx","views/plans/configRender/BtnEditarPlan.jsx","views/plans/render/ButtonOpPlan.jsx","views/plans/render/ShowPlan.jsx","views/plans/Plans.jsx"],"names":["NewPlan","props","token","Cookies","get","useState","show","setShow","handleClose","coverages","setCoverages","listCoverages","setListCoverages","descricao","setDescricao","valorBase","setValorBase","planPerson","setPlanPerson","config","headers","setPlanPersonalizado","e","a","aux","map","i","push","id","save","description","baseValue","parseFloat","custom","axios","post","then","response","attPage","catch","r","console","log","useEffect","data","className","size","onClick","Modal","onHide","Header","closeButton","Title","Body","type","onChange","target","value","placeholder","name","label","options","onSelect","selectedList","selectedItem","onRemove","removedItem","arrayAux","displayValue","Footer","Button","variant","BtnEditPlan","dataPlan","dados","setDescription","personalizavel","setPersonalizavel","PersonalizavelSet","setOptions","listCoverage","setListCoverage","coberturaSelecionados","color","Form","Group","controlId","selectedValues","required","min","step","valuePerKm","defaultChecked","patch","att","ButtonOp","userType","content","attComp","close","placement","icon","cilOptions","Plano","style","width","item","index","cilChevronLeft","N_ativos","nomePlano","porcentagem","Plans","setDados","alert","window","location","reload","atualizaPage","Spinner","animation","colorScheme","fluid","href","plano","ShowPlan"],"mappings":"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","file":"static/js/34.d533e856.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport { Button, Modal,  Form, Container, Row, Col    }  from 'react-bootstrap';\nimport axios from 'axios'\nimport Multiselect from 'multiselect-react-dropdown';\nimport Cookies  from 'js-cookie'\n\nimport {\n    CFormCheck,\n    CRow,\n    CButton,\n    CCol,\n    CFormLabel,\n    CFormInput\n  } from '@coreui/react'\n\nconst NewPlan = (props) => {\n    \n    const token = Cookies.get('TokenID')\n    const userType = Cookies.get('userType')\n   \n    const [visible, setVisible] = useState(false)  \n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const [coverages, setCoverages] = useState([])\n    const [listCoverages, setListCoverages] = useState([])\n    const [descricao, setDescricao] = useState()\n    const [valorBase, setValorBase] = useState()\n    const [valorPorKm, setValorPorKm] = useState()\n    const [planPerson, setPlanPerson] = useState()\n    // pegando coberturas disponiveis \n    let config = {\n        headers: {\n          'Authorization': token, \n          \"Accept\": \"*/*\",\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"PATCH\"\n        }\n      };\n    const namePLanSet = (e) =>{\n        setDescricao(e.target.value)\n    }\n\n    const setValueBase = (e) =>{\n        setValorBase(e.target.value)\n    }\n\n    const setValuePerKM = (e) =>{\n        setValorPorKm(e.target.value)\n    }\n    const setPlanPersonalizado = (e) =>{\n        setPlanPerson(e)\n    }\n\n    async function salvarEdicoes (){\n        \n        var aux = []\n        listCoverages.map(i =>{\n            aux.push(i.id)\n        })\n\n        const save = {\n            description:descricao,\n            coverages: aux,\n            baseValue: parseFloat(valorBase),\n            custom:planPerson,\n        }\n\n        await axios \n            .post(\"http://dashboardbff.oonpayperuse.com.br/plansService/plans\", save, config)\n            .then((response) => { \n                setShow(false);\n                props.attPage()\n            })\n            .catch(r =>{ console.log('erro na api....', r)}) // window.location.reload();\n        \n    }\n\n    useEffect( () =>{\n        axios \n            .get(\"http://dashboardbff.oonpayperuse.com.br/plansService/coverages\", config)\n            .then((response) => { \n                setCoverages(response.data)\n            })\n            .catch(r =>{ console.log('erro na api....', setCoverages('error, atualize a página...'))}) // window.location.reload();\n    }, [])\n\n    const openModal =  () => {\n        const handleShow =  setShow(true);\n    }\n\n    function onSelect(selectedList, selectedItem) {\n        setListCoverages(selectedList)\n    }\n    \n    function onRemove(selectedList, removedItem) {\n        var arrayAux = []\n\n        listCoverages.map(i =>{\n            if(i.id != removedItem.id){\n                arrayAux.push(i)\n            }\n        })\n        \n        setListCoverages(arrayAux)\n    }\n\n    return (\n        <>\n            <CButton className='btn-newPlan'  size='md' onClick={openModal} > Novo </CButton>\n\n\n            <Modal \n                show={show} \n                onHide={handleClose}\n                size=\"xl\"\n            >\n                    \n                <Modal.Header  closeButton>\n                    <Modal.Title> Novo Plano </Modal.Title>\n                </Modal.Header>\n                <Modal.Body className='container-body'>\n                    <CRow className=\"align-items-start\">\n                        <CCol>\n                            <div className='Container-ColLeft-newPlan'>\n                                <CFormLabel >Nome do Plano</CFormLabel>\n                                <CFormInput type=\"text\" onChange={namePLanSet}  placeholder=\"Plano Gold\"/>\n                                <br />\n                                <CFormLabel >Plano pode ser personalizado ? </CFormLabel>\n                                <CFormCheck type=\"radio\" name=\"person1\" onChange={() => setPlanPersonalizado(true)}  id=\"PersonYes\" label=\"Sim\" />\n                                <CFormCheck type=\"radio\" name=\"person1\" onChange={() => setPlanPersonalizado(false)} id=\"PersonNo\" label=\"Não\" />\n\n\n                                {/* Verificar */}\n                                \n                            </div>\n                        </CCol>\n                        <CCol>\n                            <div className='Container-ColRight-newPlan'>\n                                <CFormLabel> Valor Base</CFormLabel>\n                                <CFormInput type=\"text\" id=\"valuePlan\" onChange={setValueBase} placeholder=\"R$32,00\"/>\n                                <br />\n                                {planPerson === false ? \n                                    (   \n                                        <> \n                                            <CFormLabel >Serviços </CFormLabel>\n                                            <Multiselect\n                                                options={coverages} // Options to display in the dropdown\n                                                placeholder='Selecione'\n                                                label='Selecione'\n                                                onSelect={onSelect} // Function will trigger on select event\n                                                onRemove={onRemove} // Function will trigger on remove event\n                                                displayValue=\"description\" // Property name to display in the dropdown options\n                                            />\n                                        </>\n                                        \n                                    )\n                                    : null\n                                \n                                }\n                                \n                            </div>\n                        </CCol>\n                    </CRow>\n                </Modal.Body>\n\n                    \n                \n                <Modal.Footer>  \n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Sair\n                    </Button>\n                    <Button  onClick={salvarEdicoes} variant=\"primary\" >\n                        Salvar Alterações\n                    </Button>\n                </Modal.Footer>\n                    \n            </Modal>\n        </>\n    )\n}\n\nexport default NewPlan","import React, { useEffect, useState } from 'react';\nimport { Button, Form, Modal } from 'react-bootstrap';\nimport Cookies  from 'js-cookie'\n\nimport {\n    CButton, CCol, CFormCheck, CFormInput,\n    CFormLabel, CRow\n} from '@coreui/react';\nimport axios from \"axios\";\nimport Multiselect from 'multiselect-react-dropdown';\n\nconst BtnEditPlan = (props) =>{\n    \n\n    // Funcoes e variaveis do modal \n    const [visible, setVisible] = useState(false)  \n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    function openModal(){\n        const handleShow =  setShow(true);\n    }\n\n    // variaveis \n    const [valorBase, setValorBase] = useState(props.data.dataPlan.dados.baseValue)\n    const [description, setDescription] = useState(props.data.dataPlan.dados.description)\n    const [personalizavel, setPersonalizavel] = useState(props.data.dataPlan.dados.custom)\n    const token = Cookies.get('TokenID')\n    const userType = Cookies.get('userType')\n    let config = {\n        headers: {\n          'Authorization': token, \n          \"Accept\": \"*/*\",\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"PATCH\"\n        }\n      };\n\n    function descriptionName(e){\n        setDescription(e.target.value)\n    }\n\n    const setValueBase = (e) =>{\n        setValorBase(e.target.value)\n    }\n\n    const PersonalizavelSet = (e) =>{\n        setPersonalizavel(e)\n    }\n\n     function salvarEdicoes (){\n        \n        var aux = []\n        if(listCoverage != null ){\n            listCoverage.map(i =>{\n                aux.push(i.id)\n            })\n        }\n\n        let save = {\n            id:props.data.dataPlan.dados.id,\n            description:description,\n            coverages: aux,\n            baseValue: parseFloat(valorBase),\n            //valuePerKm: valorPorKm,\n            custom:personalizavel,\n        }\n        \n        console.log(save)\n        axios \n            .patch(\"http://dashboardbff.oonpayperuse.com.br/plansService/plans\", save, config)\n            .then((response) => { \n                setShow(false);\n                props.att()\n            })\n            .catch(r =>{ console.log('erro na api....', r)}) // window.location.reload();\n        \n    }\n\n    useEffect( async () =>{\n        await axios \n            .get(\"http://dashboardbff.oonpayperuse.com.br/plansService/coverages\", config)\n            .then((response) => { \n                if(response.data != null){\n                    setOptions(response.data)\n                    ops = response.data\n                }\n            })\n            .catch(r =>{ console.log('erro na api....', r)}) // window.location.reload();\n    }, [])\n\n    const [options, setOptions] = useState([])\n    const [valuesSelected, setValuesSelected ] = useState([])\n    let ops \n\n    const [listCoverage, setListCoverage] = useState(props.data.dataPlan.dados.coverages )\n    let coberturaSelecionados = props.data.dataPlan.dados.coverages \n\n  \n\n    function onSelect(selectedList, selectedItem) {\n        setListCoverage(selectedList)\n    }\n    \n    function onRemove(selectedList, removedItem) {\n        var arrayAux = []\n\n        listCoverage.map(i =>{\n            if(i.id != removedItem.id){\n                arrayAux.push(i)\n            }\n        })\n        setListCoverage(arrayAux)\n    }\n\n    return (\n        <>\n            <CButton color=\"secondary\"  onClick={openModal} size=\"sm\" variant=\"ghost\">Editar Plano</CButton>\n\n            <Modal \n                show={show} \n                onHide={handleClose}\n                size=\"xl\"\n            >\n                    \n                <Modal.Header  closeButton>\n                    <Modal.Title>Adicionar </Modal.Title>\n                </Modal.Header>\n                <Modal.Body className='container-body'>\n                    <CRow>\n                        <CCol>\n                            <Form>\n                                <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                                    <CFormLabel >Nome do Plano</CFormLabel>\n                                    <CFormInput type=\"text\" id=\"namePlan\" onChange={descriptionName} value={description} placeholder={props.data.dataPlan.dados.description}/>\n                                    <br />\n                                    {personalizavel == false ?\n                                        (   \n                                            <>\n                                                <CFormLabel >Serviços  </CFormLabel> \n                                                <Multiselect\n                                                    options={options} // Options to display in the dropdown\n                                                    placeholder='Selecione'\n                                                    selectedValues={coberturaSelecionados }\n                                                    label='Selecione'\n                                                    onSelect={onSelect} // Function will trigger on select event\n                                                    onRemove={onRemove} // Function will trigger on remove event\n                                                    displayValue=\"description\" // Property name to display in the dropdown options\n                                                />\n                                            </>\n                                        )\n                                        :null\n                                    }\n                                    \n\n                                </Form.Group>\n                            </Form>\n                        </CCol>\n                        <CCol >\n                            <Form>\n                                <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                                    <CFormLabel >Valor Base</CFormLabel>\n                                    <CFormInput type=\"text\" id=\"valuePlan\" onChange={setValueBase} value={valorBase} placeholder={props.data.dataPlan.dados.baseValue}/>\n                                    <br />\n                                    <CFormLabel >Valor por quilômetro</CFormLabel>\n                                    <CFormInput type=\"number\" id=\"valueKmPlan\" required  min=\"0.00\"  step=\".01\" placeholder={props.data.dataPlan.dados.valuePerKm}/>\n                                    <br />\n                                   \n                                    {personalizavel == false  ? \n                                        (\n                                            <> \n                                                <CFormLabel >Plano pode ser personalizado ? </CFormLabel>\n                                                <CFormCheck type=\"radio\" name=\"person1\"  onChange={ () => {PersonalizavelSet(true)}  } id=\"PersonYes\" label=\"Sim\" />\n                                                <CFormCheck type=\"radio\" name=\"person1\"  onChange={ () => {PersonalizavelSet(false)}  } id=\"PersonNo\" label=\"Não\" defaultChecked />\n                                            </>\n                                            \n                                        ) \n                                            : null\n                                    }\n\n\n                                    { personalizavel == true  ?\n                                        (\n                                            <>\n                                                <CFormLabel >Plano pode ser personalizado ? </CFormLabel>\n                                                <CFormCheck type=\"radio\" name=\"person1\"   onChange={ () => {PersonalizavelSet(true)}  } id=\"PersonYes\" label=\"Sim\"  defaultChecked />\n                                                <CFormCheck type=\"radio\" name=\"person1\"   onChange={ () => {PersonalizavelSet(false)}  } id=\"PersonNo\" label=\"Não\"  />\n                                            </>\n\n                                        )\n                                            :null\n                                    }\n                                    \n\n                                </Form.Group>\n                            </Form>\n                        </CCol>\n                    </CRow>\n                </Modal.Body>\n                \n                <Modal.Footer>  \n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Sair\n                    </Button>\n                    <Button onClick={salvarEdicoes} variant=\"primary\" >\n                        Salvar Alterações\n                    </Button>\n                </Modal.Footer>\n                    \n            </Modal>\n        </>\n    )\n}\n\nexport default BtnEditPlan","import React from 'react'\nimport CIcon from '@coreui/icons-react'\nimport {cilOptions } from '@coreui/icons'\nimport Cookies  from 'js-cookie'\n// importando buttons \n import BtnEditPlan from './../configRender/BtnEditarPlan'\n// import BtnConfig from './bottonsOp/Config'\n// import BtnGenerateChart from './bottonsOp/GenerateChart'\n// import BtnGenerateReport from './bottonsOp/GenerateReport'\n\nimport {\n    CButton ,\n    CPopover,\n  } from '@coreui/react'\n\nconst ButtonOp = (props) => {   \n    const token = Cookies.get('TokenID')\n    const userType = Cookies.get('userType')\n\n    const pageAtt = () =>{\n        props.attComp()\n    }\n\n    return (\n\n        <>\n             \n            <CPopover\n                content={\n                    <div> \n                        {userType == \"ADMIN\" ? \n                            ( <BtnEditPlan data={props} att={pageAtt}/>)\n                            :null\n                        }\n                        <br />\n                    </div>\n                }\n                close\n                placement=\"bottom\"\n            >\n                <CButton variant='white' className='buttonOps' >\n                    <CIcon icon={cilOptions}  size=\"md\" />\n                </CButton>\n            </CPopover>\n            <br />\n        </>\n    )\n}\n\nexport default ButtonOp","import { cilChevronLeft } from '@coreui/icons'\nimport CIcon from '@coreui/icons-react'\nimport {\n    CCard,\n    CCardBody,\n    CCardFooter\n} from '@coreui/react'\nimport React from 'react'\nimport ButtonOp from './ButtonOpPlan'\n\n\nconst Plano  = (props)=>{\n    \n    const upadtePlans = () =>{\n        props.attPage()\n    }\n\n    return (\n    \n        <>\n            \n           <CCard  className=\"text-center carta\" style={{ width: '16rem' }}  >\n                <CCardBody >\n                    <h2>{props.dados.description}</h2>\n                    <h5>R$ {props.dados.baseValue}</h5>     \n                    <label > R$ {props.dados.valuePerKm} por km</label>\n                    \n                    <hr />\n\n                    {props.dados.coverages.map((item, index) =>(\n                        // <Cobertura cobertura={item} />\n                        <div key={index} className='container-itens-plans'>\n                            <CIcon className='bodyIcon' size='lg' icon={cilChevronLeft}  /> \n                            <label className='bodyTexto' > {item.description} </label>\n                            <br />\n                            <label className='bodyTextoPrice' >R${item.valuePerKm} </label>\n                            <br />\n                        </div>\n                        \n                    ))} \n                    \n                    \n                </CCardBody>\n\n                <CCardFooter>\n                    {/* PASSAR PROPS DE CADA PLANO PARA EDICAO  */}\n                    <div className='container-buttonOp'>\n                        <ButtonOp dataPlan={props} attComp={upadtePlans} />\n                    </div>\n                    \n                    <h4> XXXX{props.dados.N_ativos}</h4>\n                    <h6>Planos {props.dados.nomePlano}</h6>\n                    <label > {props.dados.porcentagem} X% a mais que no último mês </label>\n                    <br />\n                    <br />\n\n                </CCardFooter>\n            </CCard>\n        </>\n        \n    )\n}\n\nexport default Plano","import React ,{useState, useEffect} from 'react'\nimport './plan.css'\nimport axios  from \"axios\"\nimport Cookies  from 'js-cookie'\nimport Multiselect from 'multiselect-react-dropdown';\nimport { Spinner }  from 'react-bootstrap';\nimport {\n    CContainer ,\n    CForm,\n    CNavbarBrand,\n    CFormInput ,\n    CButton ,\n    CNavbar,\n    CCard,\n    CCardBody,\n    CCardFooter,\n    \n  } from '@coreui/react'\n  \nimport NewPlan from './render/NewPlan'\nimport ShowPlan from './render/ShowPlan'\n\nconst Plans = () =>{\n\n    const [dados, setDados] = useState([])\n    // Array de objetos com planos\n    const token = Cookies.get('TokenID')\n    const userType = Cookies.get('userType')\n    let config = {\n      headers: {\n        'Authorization': token, \n        'Content-Type': 'application/json;charset=UTF-8',\n        \"Access-Control-Allow-Origin\": \"*\",\n      }\n    };\n    let aux = 3\n    // Toda vez que monta o componente puxa os valores\n    useEffect( ()=>{\n        axios \n            .get(\"http://dashboardbff.oonpayperuse.com.br/plansService/plans\", config)\n            .then((response) => { \n                setDados(response.data)\n                console.log(response.data)\n            })\n            .catch(r =>{ \n                console.log('error', r), alert('Login expirado'),window.location.reload()\n            })\n    }, []) \n\n    const atualizaPage = () =>{\n        setDados([])\n        axios \n            .get(\"http://dashboardbff.oonpayperuse.com.br/plansService/plans\", config)\n            .then((response) => { \n                setDados(response.data)\n                console.log(response.data)\n            })\n            .catch(r =>{ \n                console.log('error', r), alert('Login expirado'),window.location.reload()\n            })\n    }\n\n\n    if(dados == ''){\n        return(\n            <>\n                <h4> <Spinner animation=\"grow\" variant=\"info\" />  </h4>\n            </>\n        )\n    }else{\n        return (\n            <div className=\"container-plan\"> \n               \n                <CNavbar colorScheme=\"light\" className=\"bg-light\">\n                    <CContainer  fluid>\n                        <CNavbarBrand  href=\"#\"> </CNavbarBrand>\n                        <CForm className=\"d-flex container-search\">\n                            <CFormInput type=\"search\" className=\"me-2\" size='lg' placeholder=\"Procurar\" />\n                            <CButton type=\"submit\" size=\"sm\" className='btn-pesq' color=\"secondary\" variant=\"outline\">\n                                Procurar\n                            </CButton>\n                            {userType == \"ADMIN\" ? \n                                (<NewPlan attPage={atualizaPage} />)\n                                :null\n                            }\n                        </CForm>\n                    </CContainer>\n                </CNavbar>\n                \n                 <div className='container-opcoes'>\n                    {dados.map((plano, index) =>{\n                       \n                        if(index < aux){\n                            return(\n                                <div key={index} className='container-show-plans'>\n                                    <ShowPlan dados={plano} attPage={atualizaPage} />\n                                </div>\n                            )\n                        }\n                    })}\n                    \n                </div> \n    \n            </div>\n        )\n    }\n    \n}\n\nexport default Plans"],"sourceRoot":""}