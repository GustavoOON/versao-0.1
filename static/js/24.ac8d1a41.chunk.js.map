{"version":3,"sources":["config.js","views/pages/login/recoverPassword/RecoverPassword.jsx","assets/images/oon_icon_novo.png","views/pages/login/newAccount/NewAccount.jsx","views/pages/login/Login.jsx"],"names":["urlDomain","Recover","useState","show","setShow","email","setEmail","color","variant","onClick","data","className","Modal","onHide","size","Header","closeButton","Title","Body","Form","Group","controlId","Label","Control","type","onChange","e","target","value","placeholder","mySubString","console","log","length","substring","lastIndexOf","alert","NewAccount","password","setPassword","axiosConfig","headers","flagPassword","setFlagPassword","flagEmail","setFlagEmail","newUser","postData","axios","post","UrlDomain","then","res","catch","r","xs","align","rounded","src","imgOON","width","height","DefaultLayout","require","React","lazy","Login","user","setUser","flag","setFlag","setLembraMin","Cookies","get","path","name","render","props","id","label","response","status","tokenType","token","set","role","permissions","criptar","RecoverPassword"],"mappings":"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","file":"static/js/24.ac8d1a41.chunk.js","sourcesContent":["// Endereço padrão das API\n\nconst prod =  'http://dashboardbff.oonpayperuse.com.br'\nconst dev =  'http://localhost:8080'\n\n\nconst urlDomain = prod\n\n\nexport default urlDomain","import React, {useState} from 'react'\nimport { Form , Modal, Button }  from 'react-bootstrap';\nimport {\n  CButton,\n  CRow,\n  CCol,\n  \n} from '@coreui/react'\n\nconst Recover = () =>{\n    // propriedades do modal\n    const [visible, setVisible] = useState(false)  \n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const [email, setEmail] = useState('')\n    const changeEmail = (e)=>{ setEmail(e.target.value)} //  pegando valores do email\n    const [respEndpoint, setRespEndpoint]=useState(true) // apos o envio do email, pegar resposta\n    function verifica(data){ \n        const handleShow =  setShow(true);\n    }\n\n    function salvarEdicoes (){\n        \n        let mySubString\n        // caso usuario nao envie nada no email, verificar o campo.console.log('teste', mySubString)\n        console.log('teste', email)\n        if(email.length > 1){\n             mySubString = email.substring(\n                email.lastIndexOf(\"@\") + 1, \n                email.lastIndexOf(\".\")\n            );  \n        }else{\n            // Solucao temporaria\n            mySubString = 'errado'\n        }\n        \n\n        // permitir o envio do email somente se tiver dominio oonpayperuse, oonseguros\n        if((mySubString === 'oonpayperuse') ||(mySubString ==='oonseguros')){\n            verificaMail()\n            alert('Dominio Certo')\n        }else{\n            alert('Dominio Errado')\n        }\n\n        setShow(false); // fechar modal\n    }\n\n    function verificaMail (){\n        // envia o email para o endpoint, Firebase faz tudo já\n        // so chamar api do firebase\n        console.log('email enviado', email) \n    }\n\n    return (\n        <> \n            <CButton  color=\"link\" variant='ghost' onClick={verifica} className=\"btnLogin\">\n                esqueci minha senha\n            </CButton>\n\n            <Modal \n                show={show} \n                onHide={handleClose}\n                size=\"lg\"\n            >\n                    \n                <Modal.Header  closeButton>\n                    <Modal.Title>Recuperação de senha</Modal.Title>\n                </Modal.Header>\n                <Modal.Body className='container-body'>\n                    <CRow>\n                        <CCol>\n                            <Form>\n                                <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                                    <Form.Label>Digite um e-mail cadastrado</Form.Label>\n                                    <Form.Control type=\"email\"  onChange={changeEmail} value={email} placeholder=\"Digite seu e-mail\" />\n                                </Form.Group>\n                            </Form> \n                            <br />\n                            <CButton onClick={salvarEdicoes} color=\"dark\" className=\"btnLogin\">\n                                Enviar\n                            </CButton>\n                        </CCol>\n                    </CRow>\n                </Modal.Body>\n\n                \n            </Modal>\n        </>\n    )\n}\n\nexport default Recover","export default __webpack_public_path__ + \"static/media/oon_icon_novo.37962d3d.png\";","import React, {useState} from 'react'\n\nimport { Form , Modal, Button }  from 'react-bootstrap';\nimport './newAccount.css'\nimport axios from 'axios'\nimport imgOON from './../../../../assets/images/oon_icon_novo.png'\n\nimport UrlDomain from './../../../../config'\n\nimport {\n    CButton,\n    CRow,\n    CCol,\n    CImage  \n    \n  } from '@coreui/react'\n\nconst NewAccount = () => {\n\n    const [visible, setVisible] = useState(false)  \n    const [show, setShow] = useState(false);\n    const handleClose = () => {setShow(false), setFlagEmail(true) };\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const changeEmail = (e)=>{ setEmail(e.target.value)} //  pegando valores do email\n    const [respEndpoint, setRespEndpoint]=useState(true) // apos o envio do email, pegar resposta\n\n    function openModal(data){ \n        const handleShow =  setShow(true);\n    }\n\n    const userEmail = (e) => {setEmail(e.target.value)}\n    const userPassword = (e) => {setPassword(e.target.value)}\n\n    const resposta = true\n\n     let axiosConfig = {\n      headers: {\n          'Content-Type': 'application/json;charset=UTF-8',\n          \"Access-Control-Allow-Origin\": \"*\",\n      }\n    };\n    \n    const [flagPassword, setFlagPassword] = useState(true)\n    const [flagEmail, setFlagEmail] = useState(true)\n\n    const verifyValues = () =>{\n\n        setFlagEmail(true)\n        setFlagPassword(true)\n\n        if(password.length >= 6){\n            setFlagPassword(true)\n\n            // Realizar verificacao de email \n            newUser()\n\n        }else{\n            setFlagPassword(false)\n        }\n    }\n\n    const newUser =  () => {\n        var postData = {\n            email: email,\n            password: password\n        };\n        setFlagEmail(true)\n        axios\n            .post(`${UrlDomain}/accounts`, postData, axiosConfig)\n            .then((res) => {\n                console.log(res)\n                setFlagEmail(true)\n                setShow(false)\n            })\n            .catch(r =>{ \n                console.log('error', r)\n                setFlagEmail(false)\n            })\n  }\n\n    return ( \n        <>\n            <CButton  onClick={openModal} color='dark' className=\"btnLogin\">\n                Cria uma nova conta\n            </CButton>\n\n            <Modal \n                show={show} \n                onHide={handleClose}\n                size=\"xl\"\n            >\n                    \n                <Modal.Header  closeButton>\n                    <Modal.Title>Criar nova conta</Modal.Title>\n                </Modal.Header>\n                <Modal.Body className='container-body'>\n                    <CRow>\n                        <CCol className='container-newAccount-back'></CCol>\n\n                        <CCol xs={8} className='container-newAccount-mid'>\n\n                            <div className=\"clearfix\">\n                                <CImage align=\"center\" rounded src={imgOON} width={200} height={200} />\n                            </div>\n\n                            <div>\n                                <label> <b> Obs: </b> A criação de uma nova conta está condicionada ao usuário estar pré cadastrado no sistema</label>\n                                <br />\n                                <br />\n                                <Form>\n                                    <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                                        <Form.Label>Inserir um e-mail OON</Form.Label>\n                                        <Form.Control type=\"email\" onChange={userEmail} placeholder=\"E-mail\" />\n                                        <br />\n                                        <Form.Label>Inserir uma senha</Form.Label>\n                                        <Form.Control type=\"password\" onChange={userPassword}  placeholder=\"Senha\" />\n                                        {flagPassword == false ? (<> <h6> Senha deve possui no mínimo 6 elementos.</h6> </>) :null}\n                                    </Form.Group>\n                                </Form>\n                            </div>\n                            <br />\n                            <CButton color='dark' onClick={verifyValues} className='btn-salvar'>Criar conta</CButton>\n\n                            <br /> <br /> \n                            {flagEmail == false ? (<div className=\"container-err\"> <label className='label-newAccount-error'> Empregado não encontrado ou já cadastrado. </label> </div>) :null}\n                            <br /> <br />\n                           \n                        </CCol>\n\n                        <CCol className='container-newAccount-back' > \n                        {/* <label > OON - Seguros </label> */}\n                        </CCol>\n                    </CRow>\n                </Modal.Body>\n\n                \n            </Modal>\n\n        </> \n\n    )\n}\n\n\nexport default NewAccount ","import React, { useState } from 'react'\nimport axios  from \"axios\"\nimport { HashRouter, Route, Switch } from 'react-router-dom'\n\nvar CryptoJS = require(\"crypto-js\");\nimport UrlDomain from './../../../config'\n\nimport { Form  }  from 'react-bootstrap';\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CNavLink,\n  CInputGroup,\n  CFormCheck,\n  CRow,\n} from '@coreui/react'\n\nimport './login.css'\n\nimport CIcon from '@coreui/icons-react'\n\nimport RecoverPassword from './recoverPassword/RecoverPassword'\nimport NewAccount from './newAccount/NewAccount'\n\nimport { cilLockLocked, cilUser } from '@coreui/icons'\nimport Cookies from 'js-cookie'\nconst DefaultLayout = React.lazy(() => import('../../../layout/DefaultLayout'))\n\nconst Login = () => {\n  const [user, setUser] = useState('')\n  const [password, setPassword] = useState('')\n\n  const [flag, setFlag] = useState(false)   // AQUI A FLAG DEVE SER FALSE \n\n  // LEMBRAR DE MIN\n  const [lembraMin, setLembraMin] = useState(false)\n  const lembra = () =>{\n    setLembraMin(true)\n  }\n\n  const userLogin = (e) => {\n    // console.log('e vale', e.target.value)\n    setUser(e.target.value)\n  }\n\n  const userPassword = (e) => {\n    // console.log('e senha', e.target.value)\n    setPassword(e.target.value)\n  }\n\n  let config = {\n    headers: {'Content-Type': 'application/json'}\n  };\n\n  let dado\n\n  const login =  () => {\n    let axiosConfig = {\n      headers: {\n          'Content-Type': 'application/json;charset=UTF-8',\n          \"Access-Control-Allow-Origin\": \"*\",\n      }\n    };\n    var postData = {\n      email: user,\n      password: password\n    };\n\n      \n    axios\n      // .post(`${UrlDomain}/login`, postData, axiosConfig)  DESCONTINUADO \n      .post(`${UrlDomain}/accounts/login`, postData, axiosConfig)\n      .then((res) => {\n        verificaLogin(res)\n      })\n      .catch(r =>{ \n        console.log('error', r), alert('Senha errada')\n      })\n  }\n\n  const token = Cookies.get('TokenID')\n  \n  function verificaLogin(response){\n\n    // resposta 200 permiti o login\n    if(response.status == 200){\n     \n      // encriptar valores sensiveis\n      criptar(response)\n     \n    }\n  }\n\n  function criptar(response){  \n    var aux  = response.data.tokenType + ' ' + response.data.token\n\n    Cookies.set('typeToken', response.data.tokenType)\n    Cookies.set('TokenID', response.data.token )\n    Cookies.set('userType', response.data.role)\n    Cookies.set('permissions', response.data.permissions)\n\n    setFlag(true)\n  }\n\n\n  if(flag === true){\n      return (\n        <Route  path=\"/\" name=\"Home\" render={(props) => <DefaultLayout {...props} />} />\n      )\n  }else{\n    return (\n      <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center fundoBody\">\n        <CRow>\n          <CCol className='loginEsq'>\n           <p className='tituloLogin'> Bem vindo de volta </p>\n           <p  className='subLogin'> Sentimos sua falta!  </p>\n          </CCol>\n          <CCol  className='loginDir'>\n            <h2>OON PAYPER USE</h2>\n            <h6>Faça login na sua conta</h6>\n            <div className='inputsContainer'>\n            <Form>\n              <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                <Form.Label>E-mail</Form.Label>\n                <Form.Control type=\"email\"  onChange={userLogin} value={user} placeholder=\"Digite seu e-mail\" />\n              </Form.Group>\n\n              <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n                <Form.Label>Senha</Form.Label>\n                <Form.Control type=\"password\"  onChange={userPassword} value={password}  placeholder=\"Digite sua senha\" />\n              </Form.Group>\n              <CFormCheck id=\"flexCheckDefault\" onClick={lembra} label=\"Lembrar de min\"/>\n            </Form>\n            \n            <br />\n\n          \n            <CButton onClick={login} color=\"dark\" className=\"btnLogin\">\n              Entrar\n            </CButton>\n\n            \n            <NewAccount />\n            <RecoverPassword />\n            \n\n          </div>\n          </CCol>\n        </CRow>\n        \n      </div>\n    \n    )\n  }\n\n  \n}\n\nexport default Login\n\n\n\n  // console.log('antes da encriptografi',response.data.usertype )\n\n    // // encriptografado\n    // var encrypted = CryptoJS.AES.encrypt(response.data.usertype, 'secret');\n  \n    // // decritpado\n    // var decrypted = CryptoJS.AES.decrypt(response.data.usertype, 'secret');\n    // console.log('DECRIPTEDE', decrypted)\n\n    // // Cookies.set('userType2', decrypted.toString())\n    // Cookies.set('userType2', JSON.stringify(decrypted))\n\n    // // Desencriptografado\n    // var convertido = decrypted.toString(CryptoJS.enc.Utf8);\n    // console.log('convertido vem ', convertido)"],"sourceRoot":""}