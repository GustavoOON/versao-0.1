{"version":3,"sources":["views/calls/btns/bottonsOp/EditPlan.jsx","views/calls/btns/bottonsOp/Config.jsx","views/calls/btns/bottonsOp/GenerateChart.jsx","views/calls/btns/bottonsOp/GenerateReport.jsx","views/calls/btns/ButtonCall.jsx","views/calls/render/Atendimentos.jsx","views/calls/render/AtendimentoQTD.jsx","views/calls/render/AtendimentoRamo.jsx","views/calls/render/Canal.jsx","views/calls/render/RenderAtendimentos/Protocolo.jsx","views/calls/render/RenderAtendimentos/Cliente.jsx","views/calls/render/RenderAtendimentos/Data.jsx","views/calls/render/RenderAtendimentos/Funcionario.jsx","views/calls/render/RenderAtendimentos/Status.jsx","views/calls/render/AtendimentosRealizados.jsx","views/calls/render/RenderCalendario/Protocolo.jsx","views/calls/render/RenderCalendario/Data.jsx","views/calls/render/RenderCalendario/Hora.jsx","views/calls/render/RenderCalendario/Status.jsx","views/calls/render/CalendarioAtts.jsx","views/calls/Call.jsx"],"names":["BtnEditPlan","color","size","variant","Config","GenerateChart","GerarRelatorio","ButtonOp","content","placement","className","icon","cilOptions","Atendimento","random","min","max","Math","floor","useState","labelChartSemana","dia","mes","ano","data","role","style","height","marginTop","labels","datasets","label","backgroundColor","borderColor","getStyle","pointHoverBackgroundColor","borderWidth","fill","options","maintainAspectRatio","plugins","legend","display","scales","x","grid","drawOnChartArea","y","ticks","beginAtZero","maxTicksLimit","stepSize","ceil","elements","line","tension","point","radius","hitRadius","hoverRadius","hoverBorderWidth","AtendimentoQTD","AtendimentoPorEndereco","type","Canal","Protocolo","props","protocolo","Cliente","cliente","DataProtocolo","Funcionario","funcionario","Status","status","AtendimentosRealizados","busca","atendimentos","dados","setDados","busca2","setBusca","dados2","BuscaUser","auxBusca","toLocaleLowerCase","map","item","auxStatus","auxFunc","includes","push","href","onChange","e","target","value","placeholder","striped","hover","scope","index","toString","Data","Hora","hora","Calendario","Date","atualizacoes","Call","xs","Atendimentos","AtendimentoRamo"],"mappings":"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","file":"static/js/31.20ca4eff.chunk.js","sourcesContent":["import React from 'react'\n\nimport {\n    CButton ,\n  } from '@coreui/react'\n\n\nconst BtnEditPlan = () =>{\n\n    return (\n        <>\n            <CButton color=\"secondary\" size=\"sm\" variant=\"ghost\">Editar Plano</CButton>\n        </>\n    )\n}\n\nexport default BtnEditPlan","import React from 'react'\n\nimport {\n    CButton ,\n  } from '@coreui/react'\n\n\nconst Config = () =>{\n\n    return (\n        <>\n            <CButton color=\"secondary\" size=\"sm\" variant=\"ghost\">Mais Ferramentas</CButton>\n        </>\n    )\n}\n\nexport default Config","import React from 'react'\n\nimport {\n    CButton ,\n  } from '@coreui/react'\n\n\nconst GenerateChart = () =>{\n\n    return (\n        <>\n            <CButton color=\"secondary\" size=\"sm\" variant=\"ghost\">Gerar Gráfico</CButton>\n        </>\n    )\n}\n\nexport default GenerateChart","import React from 'react'\n\nimport {\n    CButton ,\n  } from '@coreui/react'\n\n\nconst GerarRelatorio = () =>{\n\n    return (\n        <>\n            <CButton color=\"secondary\" size=\"sm\" variant=\"ghost\">Gerar Relatório</CButton>\n        </>\n    )\n}\n\nexport default GerarRelatorio","import React from 'react'\nimport CIcon from '@coreui/icons-react'\nimport {cilOptions } from '@coreui/icons'\n\n// importando buttons \nimport BtnEditPlan from './bottonsOp/EditPlan'\nimport BtnConfig from './bottonsOp/Config'\nimport BtnGenerateChart from './bottonsOp/GenerateChart'\nimport BtnGenerateReport from './bottonsOp/GenerateReport'\n\nimport {\n    CButton ,\n    CPopover,\n  } from '@coreui/react'\n\nconst ButtonOp = () => {\n    // Buttom de relatorio dos cards\n    // pegar pelo PROPS, os dados do card selecionado\n    // basear esse button no que o card enviar \n\n    return (\n\n        <>\n             \n            <CPopover\n                content={\n                    <div> \n                        <BtnEditPlan />\n                        <br />\n                        <BtnGenerateReport/>\n                        <br />\n                        <BtnGenerateChart />\n                        <br />\n                        <BtnConfig />\n                    </div>\n                }\n                placement=\"left\"\n            >\n                <CButton size='sm' color='dark' variant='ghost' className='btn1Chamados' >\n                    <CIcon icon={cilOptions}  />\n                </CButton>\n            </CPopover>\n            <br />\n        </>\n    )\n}\n\nexport default ButtonOp","import React, { useState } from 'react'\nimport { CChartLine } from '@coreui/react-chartjs'\nimport { getStyle, hexToRgba } from '@coreui/utils'\nimport {\n    CCol,\n    CButton,\n    CButtonGroup,\n    CCard,\n    CCardBody,\n    CCardTitle,\n    CCardText,\n  } from '@coreui/react'\n\nimport ButtonRelatory from '../btns/ButtonCall'\n\nconst Atendimento = () =>{\n\n    const random = (min, max) => {\n        return Math.floor(Math.random() * (max - min + 1) + min)\n    }\n\n    // Exemplos\n    const [labelChartSemana, setLabelChartSemana] = useState([15,16,17,18,19,20,21]) // semana \n    const [labelChartDia, setLabelChartDia] = useState([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) // dia \n    const [labelChartMes, setLabelChartMes] = useState([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) // Mes\n    const [data, setData] = useState({dia:'Quarta-Feira ', mes:'Janeiro ', ano:'2022 '}) // deixar vir o mes certo\n    return (\n        <> \n            <CCard className='cardEsquerda'>\n                <CCardBody>\n                    <CCardTitle>  Comparativo </CCardTitle>\n                    <label > {data.mes}  {data.ano}</label>\n                    <CButtonGroup size=\"sm\" role=\"group\" className='btn1Chamados' aria-label=\"Basic outlined example\">\n                        <CButton color=\"primary\" variant=\"outline\" color=\"dark\">\n                            Dia\n                        </CButton>\n                        <CButton color=\"primary\" variant=\"outline\" color=\"dark\">\n                            Semana\n                        </CButton>\n                        <CButton color=\"primary\"  variant=\"outline\" color=\"dark\">\n                            Mês\n                        </CButton>\n                    </CButtonGroup>\n                    <ButtonRelatory   />\n\n                    <CChartLine\n                        style={{ height: '300px', marginTop: '40px' }}\n                        data={{\n                        labels: labelChartSemana,\n                        datasets: [\n                            {\n                            label: 'Atendimentos Abertos',\n                            backgroundColor:  'transparent',\n                            borderColor: getStyle('--cui-info'),\n                            pointHoverBackgroundColor: getStyle('--cui-info'),\n                            borderWidth: 2,\n                            data: [\n                                random(50, 200),\n                                random(50, 200),\n                                random(50, 200),\n                                random(50, 200),\n                                random(50, 200),\n                                random(50, 200),\n                                random(50, 200),\n                            ],\n                            fill: true,\n                            },\n                            {\n                            label: 'Atendimentos Encerrados',\n                            backgroundColor: 'transparent',\n                            borderColor: getStyle('--cui-success'),\n                            pointHoverBackgroundColor: getStyle('--cui-success'),\n                            borderWidth: 2,\n                            data: [\n                                random(50, 200),\n                                random(50, 200),\n                                random(50, 200),\n                                random(50, 200),\n                                random(50, 200),\n                                random(50, 200),\n                                random(50, 200),\n                            ],\n                            },\n                            \n                        ],\n                        }}\n                        options={{\n                        maintainAspectRatio: false,\n                        plugins: {\n                            legend: {\n                            display: true,\n                            },\n                        },\n                        scales: {\n                            x: {\n                            grid: {\n                                drawOnChartArea: false,\n                            },\n                            },\n                            y: {\n                            ticks: {\n                                beginAtZero: true,\n                                maxTicksLimit: 5,\n                                stepSize: Math.ceil(250 / 5),\n                                max: 250,\n                            },\n                            },\n                        },\n                        elements: {\n                            line: {\n                            tension: 0.4,\n                            },\n                            point: {\n                            radius: 0,\n                            hitRadius: 10,\n                            hoverRadius: 4,\n                            hoverBorderWidth: 3,\n                            },\n                        },\n                        }}\n                    />\n                </CCardBody>\n            </CCard>\n        </>\n\n    )\n}\n\nexport default Atendimento","import React, { Component } from 'react'\n\n\nimport {\n    CCol,\n    CButton,\n    CButtonGroup,\n    CCard,\n    CCardBody,\n    CCardTitle,\n    CCardText,\n  } from '@coreui/react'\n\nimport ButtonRelatory from '../btns/ButtonCall'\n\nconst AtendimentoQTD = () =>{\n\n    return (\n        <>\n            <CCard className='text-center cardDireita'>\n                <CCardBody>\n                    <ButtonRelatory   />\n                    <div className='container-atendimentos'> \n                        <h4> 55 </h4> \n                        <label>Atendimentos em Aberto</label>\n                    </div>\n\n                    <div className='container-atendimentos-fechado'> \n                        <h4> 125 </h4> \n                        <label>Atendimentos encerrados nas últimas 24 Hrs</label>\n                    </div>\n                    \n                </CCardBody>\n            </CCard>\n        </>\n    )   \n}\n\nexport default AtendimentoQTD","import React, { Component } from 'react'\nimport { CChart } from '@coreui/react-chartjs'\n\nimport {\n    CCol,\n    CButton,\n    CButtonGroup,\n    CCard,\n    CCardBody,\n    CCardTitle,\n    CCardText,\n  } from '@coreui/react'\n\nimport ButtonRelatory from '../btns/ButtonCall'\n\nconst AtendimentoPorEndereco = () =>{\n\n  \n    \n    return (\n        <> \n            <CCard className='cardEsquerda'>\n                <CCardBody>\n                    <CCardTitle> Comparativo </CCardTitle>\n                    <label > Dezembro 2021</label>\n                    <CButtonGroup size=\"sm\" role=\"group\" className='btn1Chamados' aria-label=\"Basic outlined example\">\n                        <CButton color=\"primary\" variant=\"outline\" color=\"dark\">\n                            Dia\n                        </CButton>\n                        <CButton color=\"primary\" variant=\"outline\" color=\"dark\">\n                            Semana\n                        </CButton>\n                        <CButton color=\"primary\"  variant=\"outline\" color=\"dark\">\n                            Mês\n                        </CButton>\n                    </CButtonGroup>\n                    <ButtonRelatory   />\n                    <CChart\n                        type=\"bar\"\n                        data={{\n                            labels: ['WhatsApp', 'E-mail', 'Chat', 'Instagram',  'Outro'],\n                            datasets: [\n                            {\n                                label: 'Clientes',\n                                backgroundColor:  '#198BDB',\n                                data: [40, 20, 12, 39, 10, 80],\n                            },\n                            {\n                                label: 'Não Clientes',\n                                backgroundColor: '#6EDBAC',\n                                data: [10, 45, 22, 19, 30, 40],\n                            },\n                            ],\n                        }}\n                        labels=\"months\"\n                    />\n                    \n                </CCardBody>\n            </CCard>\n        </>\n\n    )\n}\n\nexport default AtendimentoPorEndereco","import React, { Component } from 'react'\n\nimport { CChart } from '@coreui/react-chartjs'\nimport ButtonRelatory from '../btns/ButtonCall'\nimport {\n    CCol,\n    CButton,\n    CButtonGroup,\n    CCard,\n    CCardBody,\n    CCardTitle,\n    CCardText,\n  } from '@coreui/react'\n\nconst Canal = () =>{\n\n    return (\n        <>\n\n            <CCard className='cardDireita'>\n                <CCardBody>\n                    <CCardTitle> Canal </CCardTitle>\n                    <CButtonGroup size=\"sm\" role=\"group\" className='btn1Chamados' aria-label=\"Basic outlined example\">\n                        <CButton color=\"primary\" variant=\"outline\" color=\"dark\">\n                            Dia\n                        </CButton>\n                        <CButton color=\"primary\" variant=\"outline\" color=\"dark\">\n                            Semana\n                        </CButton>\n                        <CButton color=\"primary\"  variant=\"outline\" color=\"dark\">\n                            Mês\n                        </CButton>\n                    </CButtonGroup>\n                    <ButtonRelatory   />\n                    <br /> <br />\n                    <CChart\n                        type=\"doughnut\"\n                        data={{\n                            datasets: [\n                            {\n                                backgroundColor: ['#41B883', '#E46651', '#00D8FF', '#DD1B16', '#082975'],\n                                data: [40, 20, 80, 10, 5],\n                            },\n                            ],\n                            labels: ['Chat Aplicativo', 'E-mail', 'Instagram', 'Whatsapp', 'Outro'],\n                        }}\n                    />\n                    \n                </CCardBody>\n            </CCard>\n             \n            \n\n        </>\n    )\n}\n\nexport default Canal","import React from 'react'\n \nconst Protocolo = (props) => {\n\n    return (\n        <>\n            <label className='text-render-calendar'>{props.protocolo}</label>\n        </>\n    )\n}\n\nexport default Protocolo","import React from 'react'\n \nconst Cliente = (props) => {\n\n    return (\n        <>\n            <label className='text-render-calendar'>{props.cliente}</label>\n        </>\n    )\n}\n\nexport default Cliente","import React from 'react'\n \nconst DataProtocolo = (props) => {\n\n    return (\n        <>\n            <label className='text-render-calendar'> {props.data} </label>\n        </>\n    )\n}\n\nexport default DataProtocolo","import React from 'react'\n \nconst Funcionario = (props) => {\n\n    return (\n        <>\n            <label className='text-render-calendar'>{props.funcionario} </label>\n        </>\n    )\n}\n\nexport default Funcionario","import React from 'react'\n \nconst Status = (props) => {\n\n    return (\n        <>\n            <label className='text-render-calendar'>{props.status}</label>\n        </>\n    )\n}\n\nexport default Status","import React, { useState } from 'react'\n\n// importando Render\nimport Protocolo from './RenderAtendimentos/Protocolo'\nimport Cliente from './RenderAtendimentos/Cliente'\nimport DataProtocolo from './RenderAtendimentos/Data'\nimport Funcionario from './RenderAtendimentos/Funcionario'\nimport Status from './RenderAtendimentos/Status'\n\nimport ButtonRelatory from '../btns/ButtonCall'\n\nimport {\n    CTable,\n    CTableBody,\n    CTableDataCell,\n    CTableRow,\n    CCard,\n    CCardBody,\n    CTableHead,\n    CTableHeaderCell,\n    CNavbar,\n    CForm,\n    CFormInput,\n    CButton,\n    CNavbarBrand ,\n   \n  } from '@coreui/react'\n  import CIcon from '@coreui/icons-react'\n  import {cilMagnifyingGlass } from '@coreui/icons'\n\n\nconst AtendimentosRealizados = () =>{\n\n    const [atendimentos, setAtendimentos] =   useState(\n        [\n            {protocolo:123456, data:\"12/12/2012\", status:'Encerrado', funcionario:'Paulo Jorge', cliente:'sim ' },\n            {protocolo:454654, data:\"22/02/2022\", status:'Em Aberto', funcionario:'Paula Leticia', cliente:'Não ' },\n            {protocolo:4798947, data:\"28/10/2022\", status:'Em Aberto', funcionario:'Afranio Alcantara', cliente:'Não ' },\n        ]\n    )    \n    let busca\n    const [dados, setDados] = useState(atendimentos)\n    const [busca2, setBusca] = useState('')\n    const dados2 =[]\n\n    const pegandoBusca = (e) =>{\n        setBusca(e.target.value)\n        busca = e.target.value\n        BuscaUser()\n    }\n\n    const BuscaUser = () => {\n        let auxBusca = busca.toLocaleLowerCase()\n\n        atendimentos.map(item =>{\n      \n            let auxStatus = item.status.toLocaleLowerCase()     // ALTERAR AQUI DE ACORDO COM OS CAMPOS DA API\n            let auxFunc = item.funcionario.toLocaleLowerCase()   // ALTERAR AQUI DE ACORDO COM OS CAMPOS DA API\n            if((auxStatus.includes(auxBusca) || (auxFunc.includes(auxBusca)))){\n              dados2.push(item)\n              setDados(dados2)\n            }\n        })\n    }\n\n    return (\n        <> \n            <CCard className=\"cardProtocolo\">\n                <CCardBody>\n                    <CNavbar >\n                        <CNavbarBrand href=\"#\"></CNavbarBrand>\n                        <CForm className=\"d-flex\">\n                            <CFormInput type=\"search\" className=\"me-2\" onChange={pegandoBusca} value={busca2} placeholder=\"Pesquisar\" />\n                            {/* <CButton type=\"submit\" color='secondary' className='buttonCss' >\n                                <CIcon icon={cilMagnifyingGlass}  size=\"lg\" /> \n                               \n                            </CButton> */}\n                            <ButtonRelatory   />\n                        </CForm>\n                    </CNavbar>\n                    <CTable striped hover>\n                        <CTableHead>\n                            <CTableRow>\n                                <CTableHeaderCell scope=\"col\">Protocolo</CTableHeaderCell>\n                                <CTableHeaderCell scope=\"col\">Data</CTableHeaderCell>\n                                <CTableHeaderCell scope=\"col\">Status</CTableHeaderCell>\n                                <CTableHeaderCell scope=\"col\">Funcionário</CTableHeaderCell>\n                                <CTableHeaderCell scope=\"col\">Cliente</CTableHeaderCell>\n                            </CTableRow>\n                        </CTableHead>\n                        <CTableBody>\n                            {dados.map( (item, index) => (\n                                <CTableRow key={index.toString()}>\n                                    <CTableDataCell>\n                                        <Protocolo protocolo={item.protocolo} />\n                                    </CTableDataCell>\n                                        \n                                    <CTableDataCell>\n                                        <DataProtocolo data={item.data} />\n                                    </CTableDataCell>\n\n                                    <CTableDataCell>\n                                        <Status status={item.status} />\n                                    </CTableDataCell>\n                                        \n                                    <CTableDataCell>\n                                        <Funcionario funcionario={item.funcionario} />\n                                    </CTableDataCell>\n\n                                    <CTableDataCell>\n                                        <Cliente cliente={item.cliente} />\n                                    </CTableDataCell>\n                                  \n                                </CTableRow>\n                            ))}\n                        </CTableBody>\n                    </CTable>\n                </CCardBody>\n            </CCard>\n        </>\n    )\n}\n\nexport default AtendimentosRealizados","import React from 'react'\n\n\nconst Protocolo = (props) =>{\n\n    return (\n        <> \n            <label className='text-render-calendar'>{props.protocolo}</label>\n        </>\n    )\n}\n\n\nexport default Protocolo","import React from 'react'\n\n\nconst Data = (props) =>{\n\n    return (\n        <> \n            <label className='text-render-calendar'>{props.data}</label>\n        </>\n    )\n}\n\n\nexport default Data","import React from 'react'\n\n\nconst Hora = (props) =>{\n\n    return (\n        <> \n            <label className='text-render-calendar'>{props.hora}</label>\n        </>\n    )\n}\n\n\nexport default Hora","import React from 'react'\n\n\nconst Status = (props) =>{\n\n    return (\n        <> \n            <label className='text-render-calendar'>{props.status}</label>\n        </>\n    )\n}\n\n\nexport default Status","import React, { useState } from 'react'\nimport Calendar from \"react-calendar\"\n\nimport ProtocoloAtt from './RenderCalendario/Protocolo'\nimport DataAtt from './RenderCalendario/Data'\nimport HoraAtt from './RenderCalendario/Hora'\nimport StatusAtt from './RenderCalendario/Status'\n\nimport 'react-calendar/dist/Calendar.css';\n\n  import {\n    CTable,\n    CTableBody,\n    CTableDataCell,\n    CTableRow,\n    CCard,\n    CCardBody,\n    CTableHead,\n    CTableHeaderCell,\n    CCardTitle,\n    CButton,\n    CButtonGroup,\n    CNavbarBrand ,\n   \n  } from '@coreui/react'\n\n  import ButtonRelatory from '../btns/ButtonCall'\n\n  import { CDatePicker } from '@coreui/react-lab'\nconst Calendario = () =>{\n    const [value, onChange] = useState(new Date())\n\n    const [pessoas, setPessoas] = useState(22) // caso fizer alguma requisicao, utilizar aqui até carregar\n\n    const [atualizacoes, setAtualizacoes] = useState(\n            [\n                {protocolo:'23232', status:'Aberto', data:'12/01/2022', hora:'12:20'},\n                {protocolo:'23562', status:'Encerrado', data:'12/01/2022', hora:'12:30'},\n                {protocolo:'89032', status:'Aberto', data:'12/01/2022', hora:'12:50'}\n            ]\n        )\n\n\n    return (\n        <>\n             <CCard className='cardDireita'>\n                <CCardBody>\n                    <CCardTitle>  Comparativo  </CCardTitle>\n                    <label > Dezembro 2021</label>\n                    <CButtonGroup size=\"sm\" role=\"group\" className='btn1Chamados' aria-label=\"Basic outlined example\">\n                        <CButton color=\"primary\" variant=\"outline\" color=\"dark\">\n                            Dia\n                        </CButton>\n                        <CButton color=\"primary\" variant=\"outline\" color=\"dark\">\n                            Semana\n                        </CButton>\n                        <CButton color=\"primary\"  variant=\"outline\" color=\"dark\">\n                            Mês\n                        </CButton>\n                    </CButtonGroup>\n                    <ButtonRelatory   />\n                    <div className='calendarioCss2'>\n                        <Calendar\n                            onChange={onChange}\n                            value={value}\n                            className='calendarioCss2'\n                        />\n                        {/* <CDatePicker /> */}\n                    </div>\n\n                    <hr />\n\n                    <CTable striped hover>\n                        <CTableHead>\n                            <CTableRow>\n                                <CTableHeaderCell scope=\"col\">Protocolo</CTableHeaderCell>\n                                <CTableHeaderCell scope=\"col\">Status</CTableHeaderCell>\n                                <CTableHeaderCell scope=\"col\">Data</CTableHeaderCell>\n                                <CTableHeaderCell scope=\"col\">Hora</CTableHeaderCell>\n                            </CTableRow>\n                        </CTableHead>\n                        <CTableBody>\n                            {atualizacoes.map( (item, index) => (\n                                <CTableRow key={index.toString()}>\n                                    <CTableDataCell>\n                                       <ProtocoloAtt protocolo={item.protocolo} />\n                                    </CTableDataCell>\n                                        \n                                    <CTableDataCell>\n                                       <StatusAtt status={item.status} />\n                                    </CTableDataCell>\n\n                                    <CTableDataCell>\n                                        <DataAtt data={item.data} />\n                                    </CTableDataCell>\n                                        \n                                    <CTableDataCell>\n                                        <HoraAtt hora={item.hora} />\n                                    </CTableDataCell>\n\n                                </CTableRow>\n                            ))}\n                        </CTableBody>\n                    </CTable>\n\n\n                </CCardBody>\n            </CCard>\n        </>\n    )\n}\n\nexport default Calendario ","import React from 'react'\nimport './call.css'\n\n// importando telas\nimport AtendimentosChart from './render/Atendimentos'\nimport AtendimentoQTD from './render/AtendimentoQTD'\nimport AtendimentoRamo from './render/AtendimentoRamo'\nimport Canal from './render/Canal'\nimport AtendimentoRealizado from './render/AtendimentosRealizados'\nimport Calendario from './render/CalendarioAtts'\n\n\nimport {\n    CCol,\n    CRow,\n  } from '@coreui/react'\n\n\nconst Call = () =>{\n\n    return(\n        <>\n            <CRow>\n\n                <CCol xs={8}>\n                    <AtendimentosChart />\n                </CCol>\n\n                <CCol xs={4}> \n                    <AtendimentoQTD />\n                </CCol>\n\n            </CRow>\n\n            <br />\n\n            <CRow>\n\n                <CCol xs={8}>\n                    <AtendimentoRamo />\n                </CCol>\n\n                <CCol xs={4}> \n                    <Canal />\n                </CCol>\n\n            </CRow>\n\n            <br />\n\n            <CRow>\n\n                <CCol xs={8}>\n                    <AtendimentoRealizado />\n                </CCol>\n\n                <CCol xs={4}> \n                    <Calendario />\n                </CCol>\n\n            </CRow>\n\n            \n\n        </>\n    )\n}\n\nexport default Call"],"sourceRoot":""}