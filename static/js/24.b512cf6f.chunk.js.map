{"version":3,"sources":["config.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","security/decripty.js","../node_modules/multiselect-react-dropdown/dist/index.js","../../node_modules/style-inject/dist/style-inject.es.js","../../src/multiselect/multiselect.component.tsx","views/plans/render/NewPlan.jsx","views/plans/configRender/BtnEditarPlan.jsx","views/plans/render/ButtonOpPlan.jsx","views/plans/render/ShowPlan.jsx","views/plans/Plans.jsx"],"names":["urlDomain","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","CryptoJS","require","UserTypeDecryption","userType","Cookies","get","AES","decrypt","toString","enc","Utf8","userPermissionsDescription","item","infos","array","split","msm","push","module","exports","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","closeIconTypes","circle","circle2","close","cancel","OutsideAlerter","props","clickEvent","wrapperRef","useRef","outsideClick","useEffect","handleClickOutside","event","current","contains","target","addEventListener","removeEventListener","React","children","Multiselect","state","inputValue","options","filteredOptions","unfilteredOptions","selectedValues","Object","assign","preSelectedValues","toggleOptionsList","highlightOption","avoidHighlightFirstOption","showCheckbox","keepSearchTerm","groupedObject","closeIconType","closeIcon","optionTimeout","searchWrapper","createRef","searchBox","onChange","_this","bind","onKeyPress","onFocus","onBlur","renderMultiselectContainer","renderSelectedList","onRemoveSelectedItem","toggelOptionList","onArrowKeyNavigation","onSelectItem","filterOptionsByInput","removeSelectedValuesFromOptions","isSelectedValue","fadeOutSelection","isDisablePreSelectedValues","renderGroupByOptions","renderNormalOption","listenerCallback","resetSelectedValues","getSelectedItems","getSelectedItemsCount","hideOnClickOutside","onCloseOptionList","isVisible","Component","this","groupBy","singleSelect","groupByOptions","Promise","resolve","_this2","setState","initialSetValue","prevProps","prevSelectedvalues","JSON","stringify","focus","clearTimeout","skipCheck","isObject","displayValue","optionList","filter","findIndex","v","indexOf","reduce","r","a","key","create","onSearch","onKeyPressFn","_this3","matchValues","search","caseSensitiveSearch","toLowerCase","keyCode","disablePreSelectedValues","previousState","index","onRemove","splice","_this4","closeOnSelect","selectionLimit","onSelect","onSingleSelect","_this5","emptyRecordMsg","loadingMessage","loading","className","keys","map","isSelected","_this6","option","Fragment","obj","onClick","readOnly","checked","_this7","customCloseIcon","_this8","src","setTimeout","elem","offsetWidth","offsetHeight","getClientRects","element","getElementsByClassName","_this9","placeholder","id","name","hidePlaceholder","disable","showArrow","customArrow","onKeyDown","autoComplete","disabled","onMouseDown","preventDefault","renderOptionList","defaultProps","undefined","NewPlan","token","useState","show","setShow","handleClose","setPlanPerson","coverages","setCoverages","listCoverages","setListCoverages","descricao","setDescricao","valorBase","setValorBase","planPerson","config","headers","setPlanPersonalizado","aux","save","description","baseValue","parseFloat","custom","axios","post","UrlDomain","then","response","attPage","catch","console","log","color","size","data","Modal","onHide","Header","closeButton","Title","Body","label","defaultChecked","selectedList","selectedItem","removedItem","arrayAux","Footer","Button","variant","BtnEditPlan","dataPlan","dados","setDescription","personalizavel","setPersonalizavel","PersonalizavelSet","setOptions","listCoverage","setListCoverage","coberturaSelecionados","Form","Group","controlId","required","min","valuePerKm","patch","att","ButtonOp","setUserType","setPermissions","Decrypt","content","attComp","placement","icon","cilOptions","Plano","width","cilChevronLeft","N_ativos","nomePlano","porcentagem","Plans","setDados","atualizaPage","Spinner","animation","colorScheme","fluid","href","plano","ShowPlan"],"mappings":"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","file":"static/js/24.b512cf6f.chunk.js","sourcesContent":["// Endereço padrão das API\n\nconst prod = 'http://dashboardbff.oonpayperuse.com.br'\nconst dev =  'http://localhost:8080'\n\nconst tokenMaps = 'AIzaSyB9I7snvZRRQ6faupULeBXYz5tU2AUuWek'   // TOKEN PESSOAL \n\nconst urlDomain = prod\n\n\nexport default urlDomain","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","var CryptoJS = require(\"crypto-js\");\nimport Cookies from 'js-cookie'\n\nfunction UserTypeDecryption(){\n\n    var userType = Cookies.get('userType')\n    var msg  = CryptoJS.AES.decrypt(userType, 'OnnSeguros');\n    var msgOri = msg.toString(CryptoJS.enc.Utf8);\n\n    return msgOri\n}\n\n  function userPermissionsDescription(){\n    var msg = Cookies.get('permissions')\n    var infos = []\n    var array = msg.split(',')\n\n    var item \n    for (item of array){\n        \n        var msm = CryptoJS.AES.decrypt(item, 'OnnSeguros')\n        infos.push(msm.toString(CryptoJS.enc.Utf8));\n\n    } \n    \n    return infos    \n\n}\n \n\nexport default {UserTypeDecryption, userPermissionsDescription }","\n'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./multiselect-react-dropdown.cjs.production.min.js')\n} else {\n  module.exports = require('./multiselect-react-dropdown.cjs.development.js')\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","// @ts-nocheck\nimport React, { useRef, useEffect } from \"react\";\nimport \"./styles.css\";\nimport CloseCircle from '../assets/svg/closeCircle.svg';\nimport CloseCircleDark from '../assets/svg/closeCircleDark.svg';\nimport CloseLine from '../assets/svg/closeLine.svg';\nimport CloseSquare from '../assets/svg/closeSquare.svg';\nimport DownArrow from '../assets/svg/downArrow.svg';\nimport {IMultiselectProps} from \"./interface\";\n\nconst closeIconTypes = {\n  circle: CloseCircleDark,\n  circle2: CloseCircle,\n  close: CloseSquare,\n  cancel: CloseLine\n};\n\nfunction useOutsideAlerter(ref, clickEvent) {\n  useEffect(() => {\n      function handleClickOutside(event) {\n          if (ref.current && !ref.current.contains(event.target)) {\n            clickEvent();\n          }\n      }\n\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () => {\n          document.removeEventListener(\"mousedown\", handleClickOutside);\n      };\n  }, [ref]);\n}\n\n/**\n* Component that alerts if you click outside of it\n*/\nfunction OutsideAlerter(props) {\n  const wrapperRef = useRef(null);\n  useOutsideAlerter(wrapperRef, props.outsideClick);\n  return <div ref={wrapperRef}>{props.children}</div>;\n}\n\nexport class Multiselect extends React.Component<IMultiselectProps, any> {\n  static defaultProps: { customArrow: any; className: string; options: never[]; disablePreSelectedValues: boolean; selectedValues: never[]; isObject: boolean; displayValue: string; showCheckbox: boolean; selectionLimit: number; placeholder: string; groupBy: string; style: {}; emptyRecordMsg: string; onSelect: () => void; onRemove: () => void;onKeyPressFn: ()=>void; closeIcon: string; singleSelect: boolean; caseSensitiveSearch: boolean; id: string; name: string; closeOnSelect: boolean; avoidHighlightFirstOption: boolean; hidePlaceholder: boolean; showArrow: boolean; keepSearchTerm: boolean; };\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: \"\",\n      options: props.options,\n      filteredOptions: props.options,\n      unfilteredOptions: props.options,\n      selectedValues: Object.assign([], props.selectedValues),\n      preSelectedValues: Object.assign([], props.selectedValues),\n      toggleOptionsList: false,\n      highlightOption: props.avoidHighlightFirstOption ? -1 : 0,\n\t\t\tshowCheckbox: props.showCheckbox,\n      keepSearchTerm: props.keepSearchTerm,\n      groupedObject: [],\n      closeIconType: closeIconTypes[props.closeIcon] || closeIconTypes['circle']\n    };\n    // @ts-ignore\n    this.optionTimeout = null;\n    // @ts-ignore\n\t\tthis.searchWrapper = React.createRef();\n    // @ts-ignore\n\t\tthis.searchBox = React.createRef();\n    this.onChange = this.onChange.bind(this);\n    this.onKeyPress = this.onKeyPress.bind(this);\n    this.onFocus = this.onFocus.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n    this.renderMultiselectContainer = this.renderMultiselectContainer.bind(this);\n    this.renderSelectedList = this.renderSelectedList.bind(this);\n    this.onRemoveSelectedItem = this.onRemoveSelectedItem.bind(this);\n    this.toggelOptionList = this.toggelOptionList.bind(this);\n    this.onArrowKeyNavigation = this.onArrowKeyNavigation.bind(this);\n    this.onSelectItem = this.onSelectItem.bind(this);\n    this.filterOptionsByInput = this.filterOptionsByInput.bind(this);\n    this.removeSelectedValuesFromOptions = this.removeSelectedValuesFromOptions.bind(this);\n    this.isSelectedValue = this.isSelectedValue.bind(this);\n    this.fadeOutSelection = this.fadeOutSelection.bind(this);\n    this.isDisablePreSelectedValues = this.isDisablePreSelectedValues.bind(this);\n    this.renderGroupByOptions = this.renderGroupByOptions.bind(this);\n    this.renderNormalOption = this.renderNormalOption.bind(this);\n    this.listenerCallback = this.listenerCallback.bind(this);\n    this.resetSelectedValues = this.resetSelectedValues.bind(this);\n    this.getSelectedItems = this.getSelectedItems.bind(this);\n    this.getSelectedItemsCount = this.getSelectedItemsCount.bind(this);\n    this.hideOnClickOutside = this.hideOnClickOutside.bind(this);\n    this.onCloseOptionList = this.onCloseOptionList.bind(this);\n    this.isVisible = this.isVisible.bind(this);\n  }\n\n  initialSetValue() {\n    const { showCheckbox, groupBy, singleSelect } = this.props;\n\t\tconst { options } = this.state;\n    if (!showCheckbox && !singleSelect) {\n      this.removeSelectedValuesFromOptions(false);\n\t\t}\n    // if (singleSelect) {\n    //   this.hideOnClickOutside();\n    // }\n\t\tif (groupBy) {\n\t\t\tthis.groupByOptions(options);\n\t\t}\n  }\n\n  resetSelectedValues() {\n    const { unfilteredOptions } = this.state;\n    return new Promise((resolve) => {\n      this.setState({\n        selectedValues: [],\n        preSelectedValues: [],\n        options: unfilteredOptions,\n        filteredOptions: unfilteredOptions\n      }, () => {\n        // @ts-ignore\n        resolve();\n        this.initialSetValue();\n      });\n    });\n  }\n\n  getSelectedItems() {\n    return this.state.selectedValues;\n  }\n\n  getSelectedItemsCount() {\n    return this.state.selectedValues.length;\n  }\n\n  componentDidMount() {\n\t\tthis.initialSetValue();\n    // @ts-ignore\n    this.searchWrapper.current.addEventListener(\"click\", this.listenerCallback);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { options, selectedValues } = this.props;\n    const { options: prevOptions, selectedValues: prevSelectedvalues } = prevProps;\n    if (JSON.stringify(prevOptions) !== JSON.stringify(options)) {\n      this.setState({ options, filteredOptions: options, unfilteredOptions: options }, this.initialSetValue);\n    }\n    if (JSON.stringify(prevSelectedvalues) !== JSON.stringify(selectedValues)) {\n      this.setState({ selectedValues: Object.assign([], selectedValues), preSelectedValues: Object.assign([], selectedValues) }, this.initialSetValue);\n    }\n  }\n\n  listenerCallback() {\n    // @ts-ignore\n    this.searchBox.current.focus();\n  }\n\n  componentWillUnmount() {\n    // @ts-ignore\n    if (this.optionTimeout) {\n      // @ts-ignore\n      clearTimeout(this.optionTimeout);\n    }\n    // @ts-ignore\n    this.searchWrapper.current.removeEventListener('click', this.listenerCallback);\n  }\n\n  // Skipcheck flag - value will be true when the func called from on deselect anything.\n  removeSelectedValuesFromOptions(skipCheck) {\n    const { isObject, displayValue, groupBy } = this.props;\n    const { selectedValues = [], unfilteredOptions, options } = this.state;\n    if (!skipCheck && groupBy) {\n      this.groupByOptions(options);\n    }\n    if (!selectedValues.length && !skipCheck) {\n      return;\n    }\n    if (isObject) {\n      let optionList = unfilteredOptions.filter(item => {\n        return selectedValues.findIndex(\n          v => v[displayValue] === item[displayValue]\n        ) === -1\n          ? true\n          : false;\n      });\n      if (groupBy) {\n        this.groupByOptions(optionList);\n      }\n      this.setState(\n        { options: optionList, filteredOptions: optionList },\n        this.filterOptionsByInput\n      );\n      return;\n    }\n    let optionList = unfilteredOptions.filter(\n      item => selectedValues.indexOf(item) === -1\n    );\n\n    this.setState(\n      { options: optionList, filteredOptions: optionList },\n      this.filterOptionsByInput\n    );\n  }\n\n  groupByOptions(options) {\n    const { groupBy } = this.props;\n    const groupedObject = options.reduce(function(r, a) {\n      const key = a[groupBy] || \"Others\";\n      r[key] = r[key] || [];\n      r[key].push(a);\n      return r;\n    }, Object.create({}));\n\n    this.setState({ groupedObject });\n  }\n\n  onChange(event) {\n    const { onSearch } = this.props;\n    this.setState(\n      { inputValue: event.target.value },\n      this.filterOptionsByInput\n    );\n    if (onSearch) {\n      onSearch(event.target.value);\n    }\n  }\n\n  onKeyPress(event) {\n    const { onKeyPressFn } = this.props;\n    if (onKeyPressFn) {\n        onKeyPressFn(event, event.target.value);\n    }\n  }\n\n  filterOptionsByInput() {\n    let { options, filteredOptions, inputValue } = this.state;\n    const { isObject, displayValue } = this.props;\n    if (isObject) {\n      options = filteredOptions.filter(i => this.matchValues(i[displayValue], inputValue))\n    } else {\n      options = filteredOptions.filter(i => this.matchValues(i, inputValue));\n    }\n    this.groupByOptions(options);\n    this.setState({ options });\n  }\n\n  matchValues(value, search) {\n    if (this.props.caseSensitiveSearch) {\n      return value.indexOf(search) > -1;\n    }\n    if (value.toLowerCase) {\n      return value.toLowerCase().indexOf(search.toLowerCase()) > -1;\n    }\n    return value.toString().indexOf(search) > -1;\n  }\n\n  onArrowKeyNavigation(e) {\n    const {\n      options,\n      highlightOption,\n      toggleOptionsList,\n      inputValue,\n      selectedValues\n    } = this.state;\n    const { disablePreSelectedValues } = this.props;\n    if (e.keyCode === 8 && !inputValue && !disablePreSelectedValues && selectedValues.length) {\n      this.onRemoveSelectedItem(selectedValues.length - 1);\n    }\n    if (!options.length) {\n      return;\n    }\n    if (e.keyCode === 38) {\n      if (highlightOption > 0) {\n        this.setState(previousState => ({\n          highlightOption: previousState.highlightOption - 1\n        }));\n      } else {\n        this.setState({ highlightOption: options.length - 1 });\n      }\n    } else if (e.keyCode === 40) {\n      if (highlightOption < options.length - 1) {\n        this.setState(previousState => ({\n          highlightOption: previousState.highlightOption + 1\n        }));\n      } else {\n        this.setState({ highlightOption: 0 });\n      }\n    } else if (e.key === \"Enter\" && options.length && toggleOptionsList) {\n      if (highlightOption === -1) {\n        return;\n      }\n      this.onSelectItem(options[highlightOption]);\n    }\n    // TODO: Instead of scrollIntoView need to find better soln for scroll the dropwdown container.\n    // setTimeout(() => {\n    //   const element = document.querySelector(\"ul.optionContainer .highlight\");\n    //   if (element) {\n    //     element.scrollIntoView();\n    //   }\n    // });\n  }\n\n  onRemoveSelectedItem(item) {\n\t\tlet { selectedValues, index = 0 } = this.state;\n\t\tconst { onRemove, showCheckbox, displayValue, isObject } = this.props;\n    if (isObject) {\n      index = selectedValues.findIndex(\n        i => i[displayValue] === item[displayValue]\n      );\n    } else {\n      index = selectedValues.indexOf(item);\n    }\n\t\tselectedValues.splice(index, 1);\n\t\tonRemove(selectedValues, item);\n    this.setState({ selectedValues }, () => {\n      if (!showCheckbox) {\n\t\t\t\tthis.removeSelectedValuesFromOptions(true);\n      }\n    });\n    if (!this.props.closeOnSelect) {\n      // @ts-ignore\n      this.searchBox.current.focus();\n    }\n  }\n\n  onSelectItem(item) {\n    const { selectedValues } = this.state;\n    const { selectionLimit, onSelect, singleSelect, showCheckbox } = this.props;\n    if (!this.state.keepSearchTerm){\n      this.setState({\n        inputValue: ''\n      });\n    }\n    if (singleSelect) {\n      this.onSingleSelect(item);\n      onSelect([item], item);\n      return;\n    }\n    if (this.isSelectedValue(item)) {\n      this.onRemoveSelectedItem(item);\n      return;\n    }\n    if (selectionLimit == selectedValues.length) {\n      return;\n    }\n\t\tselectedValues.push(item);\n\t\tonSelect(selectedValues, item);\n    this.setState({ selectedValues }, () => {\n      if (!showCheckbox) {\n\t\t\t\tthis.removeSelectedValuesFromOptions(true);\n      } else {\n        this.filterOptionsByInput();\n      }\n    });\n    if (!this.props.closeOnSelect) {\n      // @ts-ignore\n      this.searchBox.current.focus();\n    }\n  }\n\n  onSingleSelect(item) {\n    this.setState({ selectedValues: [item], toggleOptionsList: false });\n  }\n\n  isSelectedValue(item) {\n    const { isObject, displayValue } = this.props;\n    const { selectedValues } = this.state;\n    if (isObject) {\n      return (\n        selectedValues.filter(i => i[displayValue] === item[displayValue])\n          .length > 0\n      );\n    }\n    return selectedValues.filter(i => i === item).length > 0;\n  }\n\n  renderOptionList() {\n    const { groupBy, style, emptyRecordMsg, loading, loadingMessage = 'loading...' } = this.props;\n    const { options } = this.state;\n    if (loading) {\n      return (\n        <ul className={`optionContainer`} style={style['optionContainer']}>\n          {typeof loadingMessage === 'string' && <span style={style['loadingMessage']} className={`notFound`}>{loadingMessage}</span>}\n          {typeof loadingMessage !== 'string' && loadingMessage}\n        </ul>\n      );\n    }\n    return (\n      <ul className={`optionContainer`} style={style['optionContainer']}>\n        {options.length === 0 && <span style={style['notFound']} className={`notFound`}>{emptyRecordMsg}</span>}\n        {!groupBy ? this.renderNormalOption() : this.renderGroupByOptions()}\n      </ul>\n    );\n  }\n\n  renderGroupByOptions() {\n    const { isObject = false, displayValue, showCheckbox, style, singleSelect } = this.props;\n    const { groupedObject } = this.state;\n    return Object.keys(groupedObject).map(obj => {\n      const isSelected = this.isSelectedValue(option);\n\t\t\treturn (\n\t\t\t\t<React.Fragment key={obj}>\n\t\t\t\t\t<li className=\"groupHeading\" style={style['groupHeading']}>{obj}</li>\n\t\t\t\t\t{groupedObject[obj].map((option, i) => (\n\t\t\t\t\t\t<li\n\t\t\t\t\t\t\tkey={`option${i}`}\n\t\t\t\t\t\t\tstyle={style['option']}\n              className={`groupChildEle option ${isSelected ? 'selected' : ''} ${this.fadeOutSelection(option) ? 'disableSelection' : ''} ${this.isDisablePreSelectedValues(option) ? 'disableSelection' : ''}`}\n\t\t\t\t\t\t\tonClick={() => this.onSelectItem(option)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{showCheckbox && !singleSelect && (\n                  <input\n                    type=\"checkbox\"\n                    className={'checkbox'}\n                    readOnly\n                    checked={isSelected}\n                  />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{isObject ? option[displayValue] : (option || '').toString()}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</React.Fragment>\n\t\t\t)\n\t\t});\n  }\n\n  renderNormalOption() {\n    const { isObject = false, displayValue, showCheckbox, style, singleSelect } = this.props;\n    const { highlightOption } = this.state;\n    return this.state.options.map((option, i) => {\n        const isSelected = this.isSelectedValue(option);\n        return (\n          <li\n            key={`option${i}`}\n            style={style['option']}\n            className={`option ${isSelected ? 'selected' : ''} ${highlightOption === i ? `highlightOption highlight` : \"\"} ${this.fadeOutSelection(option) ? 'disableSelection' : ''} ${this.isDisablePreSelectedValues(option) ? 'disableSelection' : ''}`}\n            onClick={() => this.onSelectItem(option)}\n          >\n            {showCheckbox && !singleSelect && (\n              <input\n                type=\"checkbox\"\n                readOnly\n                className={`checkbox`}\n                checked={isSelected}\n              />\n            )}\n            {isObject ? option[displayValue] : (option || '').toString()}\n          </li>\n      )\n    });\n  }\n\n  renderSelectedList() {\n    const { isObject = false, displayValue, style, singleSelect, customCloseIcon } = this.props;\n    const { selectedValues, closeIconType } = this.state;\n    return selectedValues.map((value, index) => (\n      <span className={`chip  ${singleSelect && 'singleChip'} ${this.isDisablePreSelectedValues(value) && 'disableSelection'}`} key={index} style={style['chips']}>\n        {!isObject ? (value || '').toString() : value[displayValue]}\n        {!this.isDisablePreSelectedValues(value) && (!customCloseIcon ? <img\n          className=\"icon_cancel closeIcon\"\n          src={closeIconType}\n          onClick={() => this.onRemoveSelectedItem(value)}\n        /> : <i className=\"custom-close\" onClick={() => this.onRemoveSelectedItem(value)}>{customCloseIcon}</i>)}\n      </span>\n    ));\n  }\n\n  isDisablePreSelectedValues(value) {\n    const { isObject, disablePreSelectedValues, displayValue } = this.props;\n    const { preSelectedValues } = this.state;\n    if (!disablePreSelectedValues || !preSelectedValues.length) {\n      return false;\n    }\n    if (isObject) {\n      return (\n        preSelectedValues.filter(i => i[displayValue] === value[displayValue])\n          .length > 0\n      );\n    }\n    return preSelectedValues.filter(i => i === value).length > 0;\n  }\n\n  fadeOutSelection(item) {\n    const { selectionLimit, showCheckbox, singleSelect } = this.props;\n    if (singleSelect) {\n      return;\n    }\n    const { selectedValues } = this.state;\n    if (selectionLimit == -1) {\n      return false;\n    }\n    if (selectionLimit != selectedValues.length) {\n      return false;\n    }\n    if (selectionLimit == selectedValues.length) {\n      if (!showCheckbox) {\n        return true;\n      } else {\n        if (this.isSelectedValue(item)) {\n          return false;\n        }\n        return true;\n      }\n    }\n  }\n\n  toggelOptionList() {\n    this.setState({\n      toggleOptionsList: !this.state.toggleOptionsList,\n      highlightOption: this.props.avoidHighlightFirstOption ? -1 : 0\n    });\n  }\n\n  onCloseOptionList() {\n    this.setState({\n      toggleOptionsList: false,\n      highlightOption: this.props.avoidHighlightFirstOption ? -1 : 0,\n      inputValue: ''\n    });\n  }\n\n  onFocus(){\n    if (this.state.toggleOptionsList) {\n      // @ts-ignore\n      clearTimeout(this.optionTimeout);\n    } else {\n      this.toggelOptionList();\n    }\n  }\n\n  onBlur(){\n    this.setState({ inputValue: '' });\n    // @ts-ignore\n    this.optionTimeout = setTimeout(this.onCloseOptionList, 250);\n  }\n\n  isVisible(elem) {\n    return !!elem && !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length )\n  }\n\n  hideOnClickOutside() {\n    const element = document.getElementsByClassName('multiselect-container')[0];\n    const outsideClickListener = event => {\n        if (element && !element.contains(event.target) && this.isVisible(element)) {\n          this.toggelOptionList();\n        }\n    }\n    document.addEventListener('click', outsideClickListener)\n  }\n\n  renderMultiselectContainer() {\n    const { inputValue, toggleOptionsList, selectedValues } = this.state;\n    const { placeholder, style, singleSelect, id, name, hidePlaceholder, disable, showArrow, className, customArrow } = this.props;\n    return (\n      <div className={`multiselect-container multiSelectContainer ${disable ? `disable_ms` : ''} ${className || ''}`} id={id || 'multiselectContainerReact'} style={style['multiselectContainer']}>\n        <div className={`search-wrapper searchWrapper ${singleSelect ? 'singleSelect' : ''}`}\n          ref={this.searchWrapper} style={style['searchBox']}\n          onClick={singleSelect ? this.toggelOptionList : () => {}}\n        >\n          {this.renderSelectedList()}\n          <input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tref={this.searchBox}\n            className=\"searchBox\"\n            id={`${id || 'search'}_input`}\n\t    name={`${name || 'search_name'}_input`}\n            onChange={this.onChange}\n            onKeyPress={this.onKeyPress}\n            value={inputValue}\n            onFocus={this.onFocus}\n            onBlur={this.onBlur}\n            placeholder={((singleSelect && selectedValues.length) || (hidePlaceholder && selectedValues.length)) ? '' : placeholder}\n            onKeyDown={this.onArrowKeyNavigation}\n            style={style['inputField']}\n            autoComplete=\"off\"\n            disabled={singleSelect || disable}\n          />\n          {(singleSelect || showArrow) && (\n            <>\n              {customArrow ? <span className=\"icon_down_dir\">{customArrow}</span> : <img src={DownArrow} className={`icon_cancel icon_down_dir`} />}\n            </>\n          )}\n        </div>\n        <div\n          className={`optionListContainer ${\n            toggleOptionsList ? 'displayBlock' : 'displayNone'\n          }`}\n          onMouseDown={(e) => {\n            e.preventDefault();\n          }}\n        >\n          {this.renderOptionList()}\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <OutsideAlerter outsideClick={this.onCloseOptionList}>\n        {this.renderMultiselectContainer()}\n      </OutsideAlerter>\n    );\n  }\n}\n\nMultiselect.defaultProps = {\n  options: [],\n  disablePreSelectedValues: false,\n  selectedValues: [],\n  isObject: true,\n  displayValue: \"model\",\n  showCheckbox: false,\n  selectionLimit: -1,\n  placeholder: \"Select\",\n\tgroupBy: \"\",\n\tstyle: {},\n\temptyRecordMsg: \"No Options Available\",\n\tonSelect: () => {},\n  onRemove: () => {},\n  onKeyPressFn: () => {},\n  closeIcon: 'circle2',\n  singleSelect: false,\n  caseSensitiveSearch: false,\n  id: '',\n  name: '',\n  closeOnSelect: true,\n  avoidHighlightFirstOption: false,\n  hidePlaceholder: false,\n  showArrow: false,\n  keepSearchTerm: false,\n  customCloseIcon: '',\n  className: '',\n  customArrow: undefined\n};\n","import React, {useState, useEffect} from 'react'\nimport { Button, Modal,  Form, Container, Row, Col    }  from 'react-bootstrap';\nimport axios from 'axios'\nimport Multiselect from 'multiselect-react-dropdown';\nimport Cookies  from 'js-cookie'\n\nimport UrlDomain from './../../../config'\n\nimport {\n    CFormCheck,\n    CRow,\n    CButton,\n    CCol,\n    CFormLabel,\n    CFormInput\n  } from '@coreui/react'\n\nconst NewPlan = (props) => {\n    \n    const token = Cookies.get('TokenID')\n    const userType = Cookies.get('userType')\n   \n    const [visible, setVisible] = useState(false)  \n    const [show, setShow] = useState(false);\n    const handleClose = () => { \n        setShow(false);\n        setPlanPerson(false)\n    }\n    const [coverages, setCoverages] = useState([])\n    const [listCoverages, setListCoverages] = useState([])\n    const [descricao, setDescricao] = useState()\n    const [valorBase, setValorBase] = useState()\n    const [valorPorKm, setValorPorKm] = useState()\n    const [planPerson, setPlanPerson] = useState()\n    // pegando coberturas disponiveis \n    let config = {\n        headers: {\n            'Authorization': `Bearer ${token}`,\n            \"Accept\": \"*/*\",\n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Methods\": \"PATCH\"\n        }\n      };\n    const namePLanSet = (e) =>{\n        setDescricao(e.target.value)\n    }\n\n    const setValueBase = (e) =>{\n        setValorBase(e.target.value)\n    }\n\n    const setValuePerKM = (e) =>{\n        setValorPorKm(e.target.value)\n    }\n    const setPlanPersonalizado = (e) =>{\n        setPlanPerson(e)\n    }\n\n    async function salvarEdicoes (){\n        \n        var aux = []\n        listCoverages.map(i =>{\n            aux.push(i.id)\n        })\n\n        const save = {\n            description:descricao,\n            coverages: aux,\n            baseValue: parseFloat(valorBase),\n            custom:planPerson,\n        }\n\n        await axios \n            .post(`${UrlDomain}/plans`, save, config)\n            .then((response) => { \n                setShow(false);\n                props.attPage()\n            })\n            .catch(r =>{ console.log('erro na api....', r)}) // window.location.reload();\n        \n    }\n\n    // useEffect( () =>{\n    //     axios \n    //         .get(`${UrlDomain}/coverages`, config)\n    //         .then((response) => { \n    //             setCoverages(response.data)\n    //         })\n    //         .catch(r =>{ console.log('erro na api....', setCoverages('error, atualize a página...'))}) // window.location.reload();\n    // }, [])\n\n    const openModal =  () => {\n        const handleShow =  setShow(true);\n        axios \n            .get(`${UrlDomain}/coverages`, config)\n            .then((response) => { \n                setCoverages(response.data)\n            })\n            .catch(r =>{ console.log('erro na api....', setCoverages('error, atualize a página...'))}) // window.location.reload();\n    }\n\n    function onSelect(selectedList, selectedItem) {\n        setListCoverages(selectedList)\n    }\n    \n    function onRemove(selectedList, removedItem) {\n        var arrayAux = []\n\n        listCoverages.map(i =>{\n            if(i.id != removedItem.id){\n                arrayAux.push(i)\n            }\n        })\n        \n        setListCoverages(arrayAux)\n    }\n\n    return (\n        <>\n            <CButton className='btn-newPlan' color='dark'   size='sm' onClick={openModal} > Novo </CButton>\n\n            <Modal \n                show={show} \n                onHide={handleClose}\n                size=\"xl\"\n            >\n                    \n                <Modal.Header  closeButton>\n                    <Modal.Title> Novo Plano </Modal.Title>\n                </Modal.Header>\n                <Modal.Body className='container-body'>\n                    <CRow className=\"align-items-start\">\n                        <CCol>\n                            <div className='Container-ColLeft-newPlan'>\n                                <CFormLabel >Nome do Plano</CFormLabel>\n                                <CFormInput type=\"text\" onChange={namePLanSet}  placeholder=\"Plano Gold\"/>\n                                <br />\n                                <CFormLabel >Plano pode ser personalizado ? </CFormLabel>\n                                <CFormCheck type=\"radio\" name=\"person1\" onChange={() => setPlanPersonalizado(true)}  id=\"PersonYes\" label=\"Sim\" />\n                                <CFormCheck type=\"radio\" name=\"person1\" onChange={() => setPlanPersonalizado(false)} color=\"dark\" defaultChecked id=\"PersonNo\" label=\"Não\" />\n\n\n                                {/* Verificar */}\n                                \n                            </div>\n                        </CCol>\n                        <CCol>\n                            <div className='Container-ColRight-newPlan'>\n                                <CFormLabel> Valor Base</CFormLabel>\n                                <CFormInput type=\"text\" id=\"valuePlan\" onChange={setValueBase} placeholder=\"R$32,00\"/>\n                                <br />\n                                {planPerson === true ? \n                                    (   \n                                        <> \n                                            <CFormLabel >Serviços </CFormLabel>\n                                            <Multiselect\n                                                options={coverages} // Options to display in the dropdown\n                                                placeholder='Selecione'\n                                                label='Selecione'\n                                                onSelect={onSelect} // Function will trigger on select event\n                                                onRemove={onRemove} // Function will trigger on remove event\n                                                displayValue=\"description\" // Property name to display in the dropdown options\n                                            />\n                                        </>\n                                        \n                                    )\n                                    : null\n                                \n                                }\n                                \n                            </div>\n                        </CCol>\n                    </CRow>\n                </Modal.Body>\n\n                    \n                \n                <Modal.Footer>  \n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Sair\n                    </Button>\n                    <Button  onClick={salvarEdicoes} variant=\"primary\" >\n                        Salvar Alterações\n                    </Button>\n                </Modal.Footer>\n                    \n            </Modal>\n        </>\n    )\n}\n\nexport default NewPlan","import React, { useEffect, useState } from 'react';\nimport { Button, Form, Modal } from 'react-bootstrap';\nimport Cookies  from 'js-cookie'\n\nimport UrlDomain from './../../../config'\n\nimport {\n    CButton, CCol, CFormCheck, CFormInput,\n    CFormLabel, CRow\n} from '@coreui/react';\nimport axios from \"axios\";\nimport Multiselect from 'multiselect-react-dropdown';\n\nconst BtnEditPlan = (props) =>{\n    \n\n    // Funcoes e variaveis do modal \n    const [visible, setVisible] = useState(false)  \n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    function openModal(){\n        const handleShow =  setShow(true);\n    }\n\n    // variaveis \n    const [valorBase, setValorBase] = useState(props.data.dataPlan.dados.baseValue)\n    const [description, setDescription] = useState(props.data.dataPlan.dados.description)\n    const [personalizavel, setPersonalizavel] = useState(props.data.dataPlan.dados.custom)\n    const token = Cookies.get('TokenID')\n    const userType = Cookies.get('userType')\n    let config = {\n        headers: {\n            'Authorization': `Bearer ${token}`,\n            \"Accept\": \"*/*\",\n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Methods\": \"PATCH\"\n        }\n      };\n\n    function descriptionName(e){\n        setDescription(e.target.value)\n    }\n\n    const setValueBase = (e) =>{\n        setValorBase(e.target.value)\n    }\n\n    const PersonalizavelSet = (e) =>{\n        setPersonalizavel(e)\n    }\n\n     function salvarEdicoes (){\n        \n        var aux = []\n        if(listCoverage != null ){\n            listCoverage.map(i =>{\n                aux.push(i.id)\n            })\n        }\n\n        let save = {\n            id:props.data.dataPlan.dados.id,\n            description:description,\n            coverages: aux,\n            baseValue: parseFloat(valorBase),\n            //valuePerKm: valorPorKm,\n            custom:personalizavel,\n        }\n        \n        axios \n            .patch(`${UrlDomain}/plans`, save, config)\n            .then((response) => { \n                setShow(false);\n                props.att()\n            })\n            .catch(r =>{ console.log('erro na api....', r)}) // window.location.reload();\n        \n    }\n\n    useEffect( async () =>{\n        await axios \n            .get(`${UrlDomain}/coverages`, config)\n            .then((response) => { \n                if(response.data != null){\n                    setOptions(response.data)\n                    ops = response.data\n                }\n            })\n            .catch(r =>{ console.log('erro na api....', r)}) // window.location.reload();\n    }, [])\n\n    const [options, setOptions] = useState([])\n    const [valuesSelected, setValuesSelected ] = useState([])\n    let ops \n\n    const [listCoverage, setListCoverage] = useState(props.data.dataPlan.dados.coverages )\n    let coberturaSelecionados = props.data.dataPlan.dados.coverages \n\n  \n\n    function onSelect(selectedList, selectedItem) {\n        setListCoverage(selectedList)\n    }\n    \n    function onRemove(selectedList, removedItem) {\n        var arrayAux = []\n\n        listCoverage.map(i =>{\n            if(i.id != removedItem.id){\n                arrayAux.push(i)\n            }\n        })\n        setListCoverage(arrayAux)\n    }\n\n    return (\n        <>\n            <CButton color=\"secondary\"  onClick={openModal} size=\"sm\" variant=\"ghost\">Editar Plano</CButton>\n\n            <Modal \n                show={show} \n                onHide={handleClose}\n                size=\"xl\"\n            >\n                    \n                <Modal.Header  closeButton>\n                    <Modal.Title>Adicionar </Modal.Title>\n                </Modal.Header>\n                <Modal.Body className='container-body'>\n                    <CRow>\n                        <CCol>\n                            <Form>\n                                <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                                    <CFormLabel >Nome do Plano</CFormLabel>\n                                    <CFormInput type=\"text\" id=\"namePlan\" onChange={descriptionName} value={description} placeholder={props.data.dataPlan.dados.description}/>\n                                    <br />\n                                    {personalizavel == false ?\n                                        (   \n                                            <>\n                                                <CFormLabel >Serviços  </CFormLabel> \n                                                <Multiselect\n                                                    options={options} // Options to display in the dropdown\n                                                    placeholder='Selecione'\n                                                    selectedValues={coberturaSelecionados }\n                                                    label='Selecione'\n                                                    onSelect={onSelect} // Function will trigger on select event\n                                                    onRemove={onRemove} // Function will trigger on remove event\n                                                    displayValue=\"description\" // Property name to display in the dropdown options\n                                                />\n                                            </>\n                                        )\n                                        :null\n                                    }\n                                    \n\n                                </Form.Group>\n                            </Form>\n                        </CCol>\n                        <CCol >\n                            <Form>\n                                <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                                    <CFormLabel >Valor Base</CFormLabel>\n                                    <CFormInput type=\"text\" id=\"valuePlan\" onChange={setValueBase} value={valorBase} placeholder={props.data.dataPlan.dados.baseValue}/>\n                                    <br />\n                                    <CFormLabel >Valor por quilômetro</CFormLabel>\n                                    <CFormInput type=\"number\" id=\"valueKmPlan\" required  min=\"0.00\"  step=\".01\" placeholder={props.data.dataPlan.dados.valuePerKm}/>\n                                    <br />\n                                   \n                                    {personalizavel == false  ? \n                                        (\n                                            <> \n                                                <CFormLabel >Plano pode ser personalizado ? </CFormLabel>\n                                                <CFormCheck type=\"radio\" name=\"person1\"  onChange={ () => {PersonalizavelSet(true)}  } id=\"PersonYes\" label=\"Sim\" />\n                                                <CFormCheck type=\"radio\" name=\"person1\"  onChange={ () => {PersonalizavelSet(false)}  } id=\"PersonNo\" label=\"Não\" defaultChecked />\n                                            </>\n                                            \n                                        ) \n                                            : null\n                                    }\n\n\n                                    { personalizavel == true  ?\n                                        (\n                                            <>\n                                                <CFormLabel >Plano pode ser personalizado ? </CFormLabel>\n                                                <CFormCheck type=\"radio\" name=\"person1\"   onChange={ () => {PersonalizavelSet(true)}  } id=\"PersonYes\" label=\"Sim\"  defaultChecked />\n                                                <CFormCheck type=\"radio\" name=\"person1\"   onChange={ () => {PersonalizavelSet(false)}  } id=\"PersonNo\" label=\"Não\"  />\n                                            </>\n\n                                        )\n                                            :null\n                                    }\n                                    \n\n                                </Form.Group>\n                            </Form>\n                        </CCol>\n                    </CRow>\n                </Modal.Body>\n                \n                <Modal.Footer>  \n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Sair\n                    </Button>\n                    <Button onClick={salvarEdicoes} variant=\"primary\" >\n                        Salvar Alterações\n                    </Button>\n                </Modal.Footer>\n                    \n            </Modal>\n        </>\n    )\n}\n\nexport default BtnEditPlan","import React,{useState, useEffect} from 'react'\nimport CIcon from '@coreui/icons-react'\nimport {cilOptions } from '@coreui/icons'\nimport Cookies  from 'js-cookie'\n// importando buttons \n import BtnEditPlan from './../configRender/BtnEditarPlan'\n// import BtnConfig from './bottonsOp/Config'\n// import BtnGenerateChart from './bottonsOp/GenerateChart'\n// import BtnGenerateReport from './bottonsOp/GenerateReport'\n\nimport {\n    CButton ,\n    CPopover,\n  } from '@coreui/react'\n\n  var CryptoJS = require(\"crypto-js\");\n  import Decrypt from './../../../security/decripty'\n\nconst ButtonOp = (props) => {   \n\n    const  [userType, setUserType] = useState()\n    const [userPermissions, setPermissions] = useState([])\n    const token = Cookies.get('TokenID')\n    const tokenType = Cookies.get('typeToken')\n\n    useEffect(() =>{\n        setUserType( Decrypt.UserTypeDecryption())\n        setPermissions(Decrypt.userPermissionsDescription())\n    },[])\n\n    const pageAtt = () =>{\n        props.attComp()\n    }\n\n    return (\n\n        <>\n             \n            <CPopover\n                content={\n                    <div> \n                        {userType == \"ADMIN\" ? \n                            ( <BtnEditPlan data={props} att={pageAtt}/>)\n                            :null\n                        }\n                        <br />\n                    </div>\n                }\n                close\n                placement=\"bottom\"\n            >\n                <CButton color='dark' variant='ghost' className='buttonOps' >\n                    <CIcon icon={cilOptions}  size=\"sm\" />\n                </CButton>\n            </CPopover>\n            <br />\n        </>\n    )\n}\n\nexport default ButtonOp","import { cilChevronLeft } from '@coreui/icons'\nimport CIcon from '@coreui/icons-react'\nimport {\n    CCard,\n    CCardBody,\n    CCardFooter\n} from '@coreui/react'\nimport React from 'react'\nimport ButtonOp from './ButtonOpPlan'\n\n\nconst Plano  = (props)=>{\n    \n    const upadtePlans = () =>{\n        props.attPage()\n    }\n\n    return (\n    \n        <>\n            \n           <CCard  className=\"text-center carta\" style={{ width: '16rem' }}  >\n                <CCardBody >\n                    <h2>{props.dados.description}</h2>\n                    <h5>R$ {props.dados.baseValue}</h5>     \n                    <label > R$ {props.dados.valuePerKm} por km</label>\n                    \n                    <hr />\n\n                    {props.dados.coverages.map((item, index) =>(\n                        // <Cobertura cobertura={item} />\n                        <div key={index.toString()} className='container-itens-plans'>\n                            <CIcon className='bodyIcon' size='lg' icon={cilChevronLeft}  /> \n                            <label className='bodyTexto' > {item.description} </label>\n                            <br />\n                            <label className='bodyTextoPrice' >R${item.valuePerKm} </label>\n                            <br />\n                        </div>\n                        \n                    ))} \n                    \n                    \n                </CCardBody>\n\n                <CCardFooter>\n                    {/* PASSAR PROPS DE CADA PLANO PARA EDICAO  */}\n                    <div className='container-buttonOp'>\n                        <ButtonOp dataPlan={props} attComp={upadtePlans} />\n                    </div>\n                    \n                    <h4> XXXX{props.dados.N_ativos}</h4>\n                    <h6>Planos {props.dados.nomePlano}</h6>\n                    <label > {props.dados.porcentagem} X% a mais que no último mês </label>\n                    <br />\n                    <br />\n\n                </CCardFooter>\n            </CCard>\n        </>\n        \n    )\n}\n\nexport default Plano","import React ,{useState, useEffect} from 'react'\nimport './plan.css'\nimport axios  from \"axios\"\nimport Cookies  from 'js-cookie'\nimport Multiselect from 'multiselect-react-dropdown';\nimport { Spinner }  from 'react-bootstrap';\nimport {\n    CContainer ,\n    CForm,\n    CNavbarBrand,\n    CFormInput ,\n    CButton ,\n    CNavbar,\n    CCard,\n    CCardBody,\n    CCardFooter,\n    \n  } from '@coreui/react'\n  \nimport UrlDomain from './../../config'\n\nimport NewPlan from './render/NewPlan'\nimport ShowPlan from './render/ShowPlan'\n\nvar CryptoJS = require(\"crypto-js\");\nimport Decrypt from './../../security/decripty'\n\nconst Plans = () =>{\n\n    const [dados, setDados] = useState(\"\")\n    // Array de objetos com planos\n    const token = Cookies.get('TokenID')\n    \n    const [userType, setUserType] = useState()\n    const [permissions, setPermissions] = useState()\n\n    let config = {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json;charset=UTF-8',\n        \"Access-Control-Allow-Origin\": \"*\",\n      }\n    };\n\n    let aux = 3\n    \n    useEffect(  ()=>{\n        setUserType( Decrypt.UserTypeDecryption())\n        setPermissions(Decrypt.userPermissionsDescription())\n        axios \n            .get(`${UrlDomain}/plans`, config)\n            .then((response) => { \n                console.log(response.data.content)\n                setDados(response.data.content)\n            })\n            .catch(r =>{ \n                setDados([1,2])\n                console.log('error eee', r) //, alert('Login expirado'),window.location.reload()\n            })\n    }, []) \n\n    const atualizaPage = () =>{\n        setDados([])\n        axios \n            .get(`${UrlDomain}/plans`, config)\n            .then((response) => { \n                setDados(response.data)\n                console.log(response.data)\n            })\n            .catch(r =>{ \n                console.log('error', r) //, alert('Login expirado'),window.location.reload()\n            })\n    }\n\n\n    if(dados === \"\"){\n        return(\n            <>\n                <h4> <Spinner animation=\"grow\" variant=\"info\" />  </h4>\n            </>\n        )\n    }else{\n        return (\n            <div className=\"container-plan\"> \n               \n                <CNavbar colorScheme=\"light\" className=\"bg-light\">\n                    <CContainer  fluid>\n                        <CNavbarBrand  href=\"#\"> </CNavbarBrand>\n                        <CForm className=\"d-flex container-search\">\n                            <CFormInput type=\"search\" className=\"me-2\" size='lg' placeholder=\"Procurar\" />\n                            <CButton type=\"submit\" size=\"sm\" className='btn-pesq' color=\"secondary\" variant=\"outline\">\n                                Procurar\n                            </CButton>\n                            {userType == \"ADMIN\" ? \n                                (<NewPlan attPage={atualizaPage} />)\n                                :null\n                            }\n                        </CForm>\n                    </CContainer>\n                </CNavbar>\n                \n                 <div className='container-opcoes'>\n                    {dados.map((plano, index) =>{\n                       \n                        if(index < aux){\n                            return(\n                                <div key={index.toString()} className='container-show-plans'>\n                                    <ShowPlan dados={plano} attPage={atualizaPage} />\n                                </div>\n                            )\n                        }\n                    })}\n                    \n                </div> \n    \n            </div>\n        )\n    }\n    \n}\n\nexport default Plans"],"sourceRoot":""}