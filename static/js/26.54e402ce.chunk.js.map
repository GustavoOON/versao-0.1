{"version":3,"sources":["config.js","security/cripto.js","views/login/components/RecoverPassword.jsx","views/login/components/NewAccount.jsx","views/login/components/MainLogin.jsx","views/login/Login.jsx"],"names":["configCookies","token","Cookies","get","headers","Authorization","urlDomain","CryptoJS","require","Cripta","e","typeUser","data","role","ciphertext","AES","encrypt","toString","set","aux","permissions","map","item","push","RecoverPassword","setForgotMyPass","useState","email","setEmail","recoverPasswordEmail","setRecoverPasswordEmail","recoverPassword","includes","className","src","logoOon","alt","height","htmlFor","id","type","onChange","target","value","placeholder","onClick","color","variant","style","backgroundColor","borderColor","NewAccount","showPassword","setShowPassword","setNewAccountBtn","password","setPassword","msgEmailIncorret","setMsgEmailIncorret","msgPasswordIncorret","setMsgPasswordIncorret","createAcc","hidden","content","size","placement","length","MainLogin","userLogin","user","userPassword","login","newAccountBtn","label","DefaultLayout","React","lazy","Login","setUser","flag","setFlag","forgotMyPass","useEffect","path","name","render","props","postData","axios","post","UrlDomain","then","res","response","status","Criptacao","tokenType","criptar","catch","r","console","log","alert"],"mappings":"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","file":"static/js/26.54e402ce.chunk.js","sourcesContent":["import Cookies from \"js-cookie\";\n\n// Endereço padrão das API\n\nconst prod = \"http://dashboardbff.oonpayperuse.com.br\";\nconst dev = \"http://localhost:8080\";\n\nconst tokenMaps = \"AIzaSyB9I7snvZRRQ6faupULeBXYz5tU2AUuWek\"; // TOKEN PESSOAL\nconst urlDomain = prod;\n\nexport const configCookies = () => {\n    const token = Cookies.get(\"TokenID\");\n\n    const authorization = {\n        headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json;charset=UTF-8\",\n            \"Access-Control-Allow-Origin\": \"*\",\n        },\n    };\n\n    return authorization;\n};\n\nexport default  urlDomain;\n","var CryptoJS = require(\"crypto-js\");\nimport Cookies from 'js-cookie'\n\n// Encripta informações sensiveis e armazena em cookies\n\n// PARA DESEMCRIPTAR A INFORMACAO NO COOKIE \n//var bytes  = CryptoJS.AES.decrypt(ciphertext, 'OnnSeguros');\n//var originalText = bytes.toString(CryptoJS.enc.Utf8);\n\nfunction Cripta(e){\n    var typeUser = e.data.role\n    var ciphertext = CryptoJS.AES.encrypt(typeUser, 'OnnSeguros').toString();\n    Cookies.set('userType', ciphertext) // salva userType\n    \n    let permissions = []\n    let aux = []\n    permissions = e.data.permissions\n\n    permissions.map(item =>{\n        aux.push(CryptoJS.AES.encrypt(item, 'OnnSeguros').toString())\n    })\n\n    Cookies.set('permissions', aux) // salva permissoes \n\n}\n\nexport default  Cripta;\n","import React, { useState } from 'react';\nimport {\n    CButton,\n    CCol,\n    CForm,\n    CFormLabel,\n    CInputGroup,\n    CFormInput,\n} from '@coreui/react';\n\nimport { AiOutlineArrowLeft } from 'react-icons/ai';\n\nimport logoOon from '../../../assets/images/oon-seguros-logo.svg';\n\nconst RecoverPassword = ({ setForgotMyPass }) => {\n    const [email, setEmail] = useState('');\n    const recoverLogin = (e) => {\n        setEmail(e.target.value);\n    }; //  pegando valores do email\n    const [recoverPasswordEmail, setRecoverPasswordEmail] = useState(true);\n\n    // const [respEndpoint, setRespEndpoint] = useState(true) // apos o envio do email, pegar resposta\n    // function verifica(data) {\n    //     const handleShow = setShow(true);\n    // }\n\n    // function salvarEdicoes() {\n\n    //     let mySubString\n    //     // caso usuario nao envie nada no email, verificar o campo.console.log('teste', mySubString)\n    //     if (email.length > 1) {\n    //         mySubString = email.substring(\n    //             email.lastIndexOf(\"@\") + 1,\n    //             email.lastIndexOf(\".\")\n    //         );\n    //     } else {\n    //         // Solucao temporaria\n    //         mySubString = 'errado'\n    //     }\n\n    //     // permitir o envio do email somente se tiver dominio oonpayperuse, oonseguros\n    //     if ((mySubString === 'oonpayperuse') || (mySubString === 'oonseguros')) {\n    //         verificaMail()\n    //         alert('Dominio Certo')\n    //     } else {\n    //         alert('Dominio Errado')\n    //     }\n\n    //     setShow(false); // fechar modal\n    // }\n\n    // function verificaMail() {\n    //     // envia o email para o endpoint, Firebase faz tudo já\n    //     // so chamar api do firebase\n    //     console.log('email enviado', email)\n    // }\n\n    const recoverPassword = () => {\n        (email != '') & email.includes('@')\n            ? setRecoverPasswordEmail(false)\n            : null;\n    };\n\n    return recoverPasswordEmail ? (\n        <div className=\"fundo-body-forgot-password min-vh-100 align-items-center d-flex\">\n            <CCol className=\"forgot-password-container\">\n                <img\n                    className=\"img-oon-forgot-password\"\n                    src={logoOon}\n                    alt=\"logo oon seguros\"\n                    height={120}\n                />\n                <p className=\"subtitle-login-dir\">Esqueceu sua senha?</p>\n                <p className=\"text-new-account\">\n                    Não se preocupe, enviaremos a você as instruções de\n                    recuperação.\n                </p>\n                <div>\n                    <CForm>\n                        <CFormLabel\n                            htmlFor=\"email\"\n                            className=\"mb-1 email-password-form\"\n                        >\n                            E-mail\n                        </CFormLabel>\n                        <CInputGroup className=\"mb-3\">\n                            <CFormInput\n                                className=\"radius-border\"\n                                id=\"email\"\n                                type=\"email\"\n                                onChange={recoverLogin}\n                                placeholder=\"Digite seu e-mail\"\n                            />\n                        </CInputGroup>\n                    </CForm>\n                    <br />\n                    <CButton\n                        onClick={recoverPassword}\n                        className=\"btns-login btn-save-global\"\n                    >\n                        Recuperar senha\n                    </CButton>\n                    <CButton\n                        color=\"link\"\n                        variant=\"ghost\"\n                        onClick={() => setForgotMyPass(true)}\n                        className=\"btn-forgot-password mt-1\"\n                    >\n                        <AiOutlineArrowLeft className=\"m-1\" />\n                        Voltar para o log in\n                    </CButton>\n                </div>\n            </CCol>\n        </div>\n    ) : (\n        <div className=\"fundo-body-forgot-password min-vh-100 align-items-center d-flex\">\n            <CCol className=\"forgot-password-container\">\n                <img\n                    className=\"img-oon-forgot-password\"\n                    src={logoOon}\n                    alt=\"logo oon seguros\"\n                    height={120}\n                />\n                <p className=\"subtitle-login-dir\">\n                    Confira sua caixa de e-mail!\n                </p>\n                <p className=\"text-new-account\">\n                    Nós enviamos o link de recuperação da sua senha para o\n                    e-mail {<br />}\n                    <b>{email}</b>\n                </p>\n                <div>\n                    <CButton\n                        onClick={() => setForgotMyPass(true)}\n                        className=\"btns-login btn-save-global\"\n                        style={{\n                            backgroundColor: '#216CFF',\n                            borderColor: '#216CFF',\n                        }}\n                    >\n                        Voltar para o log in\n                    </CButton>\n                    <div className=\"btn-forgot-password mt-3 d-flex align-items-center\">\n                        <label> Não recebeu o e-mail? </label>\n                        <CButton\n                            color=\"link\"\n                            variant=\"ghost\"\n                            onClick={recoverPassword}\n                            className=\"p-0 ps-1 btn-link-global\"\n                        >\n                            Enviar novamente.\n                        </CButton>\n                    </div>\n                </div>\n            </CCol>\n        </div>\n    );\n};\n\nexport default RecoverPassword;\n","import React, { useState } from 'react';\nimport axios from 'axios';\nimport {\n    CButton,\n    CPopover,\n    CForm,\n    CFormLabel,\n    CInputGroup,\n    CFormInput,\n} from '@coreui/react';\n\nimport { FaEye, FaEyeSlash } from 'react-icons/fa';\nimport { MdOutlineHelpOutline, MdCheckCircleOutline } from 'react-icons/md';\nimport { Spinner } from 'react-bootstrap';\n\nimport UrlDomain, { configCookies } from '../../../config';\nimport logoOon from '../../../assets/images/oon-seguros-logo.svg';\n\nimport '../css/newAccount.css';\n\nconst NewAccount = ({ showPassword, setShowPassword, setNewAccountBtn }) => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [msgEmailIncorret, setMsgEmailIncorret] = useState(true);\n    const [msgPasswordIncorret, setMsgPasswordIncorret] = useState(true);\n    const [createAcc, setCreateAcc] = useState(false);\n\n    const userEmail = (e) => {\n        setEmail(e.target.value);\n    };\n    const userPassword = (e) => {\n        setPassword(e.target.value);\n    };\n\n    const newUser = () => {\n        // setCreateAcc(true);\n        // const postData = {\n        //     email\n        //     password\n        // };\n        // const config = configCookies();\n        // setFlagEmail(true)\n        // axios\n        //     .post(`${UrlDomain}/accounts`, postData, config)\n        //     .then((res) => {\n        //         console.log(res);\n        //         setNewAccountBtn(true);\n        //         setInterval(() => {\n        //             setCreateAcc(false);\n        //         }, 2000);\n        //         // setFlagEmail(true)\n        //         // setShow(false)\n        //     })\n        //     .catch((r) => {\n        //         console.log('error', r);\n        //         // setFlagEmail(false)\n        //     });\n    };\n\n    const handleSubmit = () => {\n        email.includes('@') && password.length >= 6 ? newUser() : null;\n\n        setMsgEmailIncorret(email.includes('@'));\n\n        password.length >= 6\n            ? setMsgPasswordIncorret(true)\n            : setMsgPasswordIncorret(false);\n    };\n\n    return createAcc ? (\n        <>\n            <img className=\"img-oon\" src={logoOon} alt=\"logo oon seguros\" />\n            <p className=\"subtitle-login-dir\">Conta criada com sucesso!!</p>\n            <div className=\"inputs-container w-50\">\n                <CButton\n                    onClick={() => setNewAccountBtn(true)}\n                    className=\"btn-login-white\"\n                >\n                    Faça login\n                </CButton>\n            </div>\n        </>\n    ) : (\n        <>\n            <img className=\"img-oon\" src={logoOon} alt=\"logo oon seguros\" />\n            <p className=\"subtitle-login-dir\">Criar nova conta</p>\n            <p className=\"text-new-account\">\n                Para a criação de uma nova conta, é necessário que o usuário\n                esteja pré-cadastrado no sistema\n            </p>\n            <div className=\"inputs-container\">\n                <CForm>\n                    <CFormLabel\n                        htmlFor=\"email\"\n                        className=\"mb-1 email-password-form\"\n                    >\n                        E-mail (cadastrado no sistema)\n                    </CFormLabel>\n                    <CInputGroup className=\"mb-3 d-flex-wrap\">\n                        <div className=\"w-100\">\n                            <CFormInput\n                                className=\"radius-border\"\n                                id=\"email\"\n                                type=\"email\"\n                                onChange={userEmail}\n                                placeholder=\"Digite um e-mail pré-cadastrado\"\n                            />\n                        </div>\n                        <label className=\"error-text\" hidden={msgEmailIncorret}>\n                            Não foi possível encontrar esse e-mail no sistema\n                        </label>\n                    </CInputGroup>\n                    <CFormLabel\n                        htmlFor=\"senha\"\n                        className=\"mb-1 email-password-form\"\n                    >\n                        Senha\n                        <CPopover\n                            content={\n                                <div className=\"d-flex align-items-center p-0\">\n                                    <MdCheckCircleOutline\n                                        className=\"me-2\"\n                                        size={20}\n                                        color=\"#216CFF\"\n                                    />\n                                    <label\n                                        style={{\n                                            color: '#216CFF',\n                                        }}\n                                    >\n                                        A senha deve conter ao menos 6\n                                        caracteres\n                                    </label>\n                                </div>\n                            }\n                            placement=\"bottom\"\n                        >\n                            <i className=\"ms-1\">\n                                <MdOutlineHelpOutline />\n                            </i>\n                        </CPopover>\n                    </CFormLabel>\n                    <CInputGroup className=\"mb-3\">\n                        <div className=\"input-icons d-flex flex-row-reverse w-100\">\n                            <CFormInput\n                                className=\"radius-border\"\n                                id=\"senha\"\n                                type={!showPassword ? 'password' : 'text'}\n                                onChange={userPassword}\n                                value={password}\n                                placeholder=\"Crie uma senha de acesso\"\n                                aria-describedby=\"eye-password\"\n                            />\n                            <i\n                                id=\"eye-password\"\n                                className=\"icon-login i-absolute\"\n                                onClick={() =>\n                                    !showPassword\n                                        ? setShowPassword(true)\n                                        : setShowPassword(false)\n                                }\n                            >\n                                {!showPassword ? <FaEye /> : <FaEyeSlash />}\n                            </i>\n                        </div>\n                        <label\n                            className=\"error-text\"\n                            hidden={msgPasswordIncorret}\n                        >\n                            A senha deve conter pelo menos 6 caracteres.\n                        </label>\n                    </CInputGroup>\n                </CForm>\n                <br />\n                <CButton\n                    onClick={handleSubmit}\n                    className=\"btns-login btn-save-global\"\n                >\n                    Criar conta\n                </CButton>\n                <p className=\"pt-5 text-center new-account-text\">\n                    Já tem uma contra? Faça login!\n                </p>\n                <CButton\n                    onClick={() => setNewAccountBtn(true)}\n                    className=\"btn-login-white\"\n                >\n                    Faça login\n                </CButton>\n            </div>\n        </>\n    );\n};\n\nexport default NewAccount;\n","import React, { useState } from 'react';\nimport axios from 'axios';\nimport {\n    CButton,\n    CCol,\n    CForm,\n    CFormCheck,\n    CFormInput,\n    CFormLabel,\n    CInputGroup,\n    CRow,\n} from '@coreui/react';\nimport { FaEye, FaEyeSlash } from 'react-icons/fa';\n\nimport urlDomain from 'src/config';\nimport logoOon from '../../../assets/images/oon-seguros-logo.svg';\nimport NewAccount from './NewAccount';\n\nfunction MainLogin({\n    userLogin,\n    user,\n    userPassword,\n    password,\n    setForgotMyPass,\n    login,\n}) {\n    const [newAccountBtn, setNewAccountBtn] = useState(true);\n    const [showPassword, setShowPassword] = useState(false);\n    const [msgEmailIncorret, setMsgEmailIncorret] = useState(true);\n    const [msgPasswordIncorret, setMsgPasswordIncorret] = useState(true);\n\n    const handleSubmit = () => {\n        user.includes('@')\n            ? setMsgEmailIncorret(true)\n            : setMsgEmailIncorret(false);\n\n        password.length >= 6\n            ? setMsgPasswordIncorret(true)\n            : setMsgPasswordIncorret(false);\n\n        msgEmailIncorret && msgPasswordIncorret ? login() : null;\n    };\n\n    const lembra = ({ target }) => {\n        // console.log(\n        // \ttarget.checked, 'aa'\n        // );\n        // if (target.checked) {\n        // localStorage.setItem('user', JSON.stringify({ user, password, checked: target.checked }))\n        // \t\tsetChecked(true)\n        // \t} else {\n        // \t\tlocalStorage.removeItem('user')\n        // \t\tsetChecked(false)\n        // \t}\n    };\n\n    return (\n        <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center fundo-body\">\n            <CRow>\n                <CCol className=\"login-esq\">\n                    <p className=\"title-login-esq\">Bem vindo de volta</p>\n                    <p className=\"subtitle-login-esq\">Sentimos sua falta!</p>\n                </CCol>\n                {newAccountBtn ? (\n                    <CCol className=\"login-dir\">\n                        <img\n                            className=\"img-oon\"\n                            src={logoOon}\n                            alt=\"logo oon seguros\"\n                        />\n                        <p className=\"subtitle-login-dir\">\n                            Faça login na sua conta\n                        </p>\n                        <div className=\"inputs-container\">\n                            <CForm>\n                                <CFormLabel\n                                    htmlFor=\"email\"\n                                    className=\"mb-1 email-password-form\"\n                                >\n                                    E-mail\n                                </CFormLabel>\n                                <CInputGroup className=\"mb-3 d-flex-wrap\">\n                                    <div className=\"w-100\">\n                                        <CFormInput\n                                            className=\"radius-border\"\n                                            id=\"email\"\n                                            type=\"email\"\n                                            onChange={userLogin}\n                                            value={user}\n                                            placeholder=\"Digite seu e-mail\"\n                                        />\n                                    </div>\n                                    <label\n                                        className=\"error-text\"\n                                        hidden={msgEmailIncorret}\n                                    >\n                                        Não foi possível encontrar esse e-mail\n                                        no sistema\n                                    </label>\n                                </CInputGroup>\n                                <CFormLabel\n                                    htmlFor=\"senha\"\n                                    className=\"mb-1 email-password-form\"\n                                >\n                                    Senha\n                                </CFormLabel>\n                                <CInputGroup className=\"mb-3\">\n                                    <div className=\"input-icons d-flex flex-row-reverse w-100\">\n                                        <CFormInput\n                                            className=\"radius-border\"\n                                            id=\"senha\"\n                                            type={\n                                                !showPassword\n                                                    ? 'password'\n                                                    : 'text'\n                                            }\n                                            onChange={userPassword}\n                                            value={password}\n                                            placeholder=\"Digite sua senha\"\n                                            aria-describedby=\"eye-password\"\n                                        />\n                                        <i\n                                            id=\"eye-password\"\n                                            className=\"icon-login i-absolute\"\n                                            onClick={() =>\n                                                !showPassword\n                                                    ? setShowPassword(true)\n                                                    : setShowPassword(false)\n                                            }\n                                        >\n                                            {!showPassword ? (\n                                                <FaEye />\n                                            ) : (\n                                                <FaEyeSlash />\n                                            )}\n                                        </i>\n                                    </div>\n                                    <label\n                                        className=\"error-text\"\n                                        hidden={msgPasswordIncorret}\n                                    >\n                                        Senha incorreta, tente novamente.\n                                    </label>\n                                </CInputGroup>\n                                <CFormCheck\n                                    className=\"email-password-form\"\n                                    id=\"Lembrar de min\"\n                                    onChange={lembra}\n                                    label=\"Lembrar de mim\"\n                                    // checked={checked}\n                                />\n                            </CForm>\n                            <br />\n                            <CButton\n                                onClick={handleSubmit}\n                                className=\"btns-login btn-save-global\"\n                            >\n                                Entrar na minha conta\n                            </CButton>\n                            <CButton\n                                color=\"link\"\n                                variant=\"ghost\"\n                                onClick={() => setForgotMyPass(false)}\n                                className=\"btn-forgot-password\"\n                            >\n                                Esqueci minha senha\n                            </CButton>\n                            <p className=\"pt-5 text-center new-account-text\">\n                                Não tem uma conta ainda? Crie já!\n                            </p>\n                            <CButton\n                                onClick={() => setNewAccountBtn(false)}\n                                className=\"btn-login-white\"\n                            >\n                                Criar uma nova conta\n                            </CButton>\n                        </div>\n                    </CCol>\n                ) : (\n                    <CCol className=\"login-dir\">\n                        <NewAccount\n                            showPassword={showPassword}\n                            setShowPassword={setShowPassword}\n                            setNewAccountBtn={setNewAccountBtn}\n                        />\n                    </CCol>\n                )}\n            </CRow>\n        </div>\n    );\n}\n\nexport default MainLogin;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Route } from 'react-router-dom';\nimport Cookies from 'js-cookie';\n\n// var CryptoJS = require(\"crypto-js\");\nimport Criptacao from '../../security/cripto';\nimport UrlDomain from '../../config';\nimport RecoverPassword from './components/RecoverPassword';\nimport MainLogin from './components/MainLogin';\nconst DefaultLayout = React.lazy(() => import('../../layout/DefaultLayout'));\n\nimport './css/login.css';\n\nconst Login = () => {\n    const [user, setUser] = useState('');\n    const [password, setPassword] = useState('');\n    const [flag, setFlag] = useState(false); // AQUI A FLAG DEVE SER FALSE\n    const [forgotMyPass, setForgotMyPass] = useState(true);\n\n    // LEMBRAR DE MIN\n    const lembra = ({ target }) => {\n        // console.log(\n        // \ttarget.checked, 'aa'\n        // );\n        // if (target.checked) {\n        // localStorage.setItem('user', JSON.stringify({ user, password, checked: target.checked }))\n        // \t\tsetChecked(true)\n        // \t} else {\n        // \t\tlocalStorage.removeItem('user')\n        // \t\tsetChecked(false)\n        // \t}\n    };\n\n    useEffect(() => {\n        // const localStor = JSON.parse(localStorage.getItem('user'));\n        // if(localStor){\n        // \tsetChecked(true)\n        // \tlogin({\n        // \t\temail: localStor.user,\n        // \t\tpassword: localStor.password\n        // \t})\n        // \tsetFlag(true)\n        // }\n    }, []);\n\n    const userLogin = (e) => {\n        setUser(e.target.value);\n    };\n\n    const userPassword = (e) => {\n        setPassword(e.target.value);\n    };\n\n    const login = () => {\n        const axiosConfig = {\n            headers: {\n                'Content-Type': 'application/json;charset=UTF-8',\n                'Access-Control-Allow-Origin': '*',\n            },\n        };\n\n        const postData = {\n            email: user,\n            password: password,\n        };\n\n        axios\n            .post(`${UrlDomain}/accounts/login`, postData, axiosConfig)\n            .then((res) => {\n                verificaLogin(res);\n            })\n            .catch((r) => {\n                console.log('error', r), alert('Senha errada');\n            });\n    };\n\n    function verificaLogin(response) {\n        // var usT = Cookies.get('userType')\n        // resposta 200 permiti o login\n        if (response.status == 200) {\n            var ini = Criptacao(response);\n            criptar(response);\n        }\n    }\n\n    function criptar(response) {\n        // var aux = response.data.tokenType + ' ' + response.data.token\n        Cookies.set('typeToken', response.data.tokenType);\n        Cookies.set('TokenID', response.data.token);\n        //Cookies.set('userType', response.data.role)\n        //Cookies.set('permissions', response.data.permissions)\n        setFlag(true);\n    }\n\n    if (flag) {\n        return (\n            <Route\n                path=\"/\"\n                name=\"Home\"\n                render={(props) => <DefaultLayout {...props} />}\n            />\n        );\n    } else {\n        return forgotMyPass ? (\n            <MainLogin\n                userLogin={userLogin}\n                user={user}\n                userPassword={userPassword}\n                password={password}\n                setForgotMyPass={setForgotMyPass}\n                login={login}\n            />\n        ) : (\n            <RecoverPassword\n                setForgotMyPass={setForgotMyPass}\n                userLogin={userLogin}\n            />\n        );\n    }\n};\n\nexport default Login;\n"],"sourceRoot":""}