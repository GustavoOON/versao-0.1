{"version":3,"sources":["views/components/Pagination.jsx","views/tracking/components/FormatDate.jsx","views/finance/components/MonthAndYear.jsx","views/finance/modais/Filter.jsx","views/finance/modais/Reports.jsx","views/finance/buttons/ButtonGraph.jsx","views/finance/charts/ChartPlans.jsx","views/finance/charts/ChartUsers.jsx","views/finance/charts/Calendar.jsx","views/finance/users/Users.jsx","views/finance/charts/ToppingsAndDevices.jsx","views/finance/Finance.jsx"],"names":["Pagination","numberOfPages","page","previousPage","setPreviousPage","currentPage","setCurrentPage","nextPage","setNextPage","qtdElements","name","capturePreviousPage","e","nPage","captureNextPage","className","onClick","variant","defaultChecked","active","FormatDate","date","Date","week","getDay","day","getDate","month","getMonth","year","getFullYear","hours","getHours","minute","getMinutes","style","color","fontSize","MonthAndYear","UsersFilter","filter","setFilter","saveFilter","useState","valueFilterCity","setValueFilterCity","valueFilterType","setValueFilterType","valueFilterStartDate","setValueFilterStartDate","valueFilterFinalDate","setValueFilterFinalDate","useEffect","visible","onClose","size","alignment","xs","onChange","target","value","options","label","type","Reports","report","setReport","saveReport","valueReportCity","setValueReportCity","valueReportType","setValueReportType","valueReportStartDate","setValueReportStartDate","valueReportFinalDate","setValueReportFinalDate","modalReport","setModalReport","setCity","period","setPeriod","typeUsers","setTypeUsers","closeButton","init","split","splice","reverse","join","final","downloadReports","ButtonChart","seta","direction","caret","icon","cilOptions","Filter","ChartPlan","ButtonGraph","usersCity","usersType","initialDate","finalDate","plugins","legend","display","data","datasets","backgroundColor","barPercentage","labels","width","height","ChartUsers","cardChartFilter","setCardChartFilter","city","bodyWeek","newUsers","recurringUsers","sm","position","padding","boxWidth","Calendar2","pessoas","Users","op1","setOp1","setNumberOfPages","defaulters","setDefaulters","nonDefaulters","setNonDefaulters","adimplÃªncia","nContrato","funcionario","valor","pagamento","placaVeiculo","dados","choiceNonDefaulters","totalPages","adiplentes","dado","placeholder","inadiplentes","striped","hover","scope","map","i","index","toFixed","replace","toString","ToppingsAndDevices","layout","Finance"],"mappings":"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","file":"static/js/23.4fbc7545.chunk.js","sourcesContent":["import React from 'react';\nimport { CButton, CPagination } from '@coreui/react';\nimport { TiChevronLeftOutline, TiChevronRightOutline } from 'react-icons/ti';\n\nimport './pagination.css';\n\nfunction Pagination({\n    numberOfPages,\n    page,\n    previousPage,\n    setPreviousPage,\n    currentPage,\n    setCurrentPage,\n    nextPage,\n    setNextPage,\n    qtdElements,\n    name,\n}) {\n    function capturePreviousPage(e, nPage) {\n        if (currentPage == 1) {\n            setPreviousPage('');\n            setNextPage(2);\n        } else if (e == nPage) {\n            setNextPage(2);\n            setCurrentPage(1);\n            setPreviousPage('');\n        } else {\n            setNextPage(currentPage);\n            setCurrentPage(currentPage - 1);\n            setPreviousPage(currentPage - 2);\n        }\n        const aux = e - 1;\n        page(aux);\n    }\n\n    // Proxima pagina\n    function captureNextPage(e, nPage) {\n        if (currentPage == 1 && nPage == 2) {\n            setNextPage('');\n            setCurrentPage(currentPage + 1);\n            setPreviousPage(1);\n        } else if (e == nPage) {\n            setNextPage('');\n            setCurrentPage(e);\n            setPreviousPage(numberOfPages - 1);\n        } else if (currentPage == 1 && nPage != 2) {\n            setNextPage(3);\n            setCurrentPage(currentPage + 1);\n            setPreviousPage(1);\n        } else if (currentPage < nPage - 1) {\n            setNextPage(currentPage + 2);\n            setCurrentPage(currentPage + 1);\n            setPreviousPage(currentPage);\n        }\n        const aux = e - 1;\n        page(aux);\n    }\n\n    return (\n        <CPagination\n            className=\"container-devices-pagination\"\n            aria-label=\"Page navigation example\"\n        >\n            {qtdElements ? (\n                <label className=\"container-qtd-employeer\">\n                    HÃ¡ {qtdElements} {name}\n                </label>\n            ) : null}\n            <div className=\"container-pagination-align justify-content-end\">\n                {previousPage != '' ? (\n                    <>\n                        <CButton\n                            className=\"btn-user-pagination\"\n                            onClick={() => {\n                                capturePreviousPage(\n                                    previousPage,\n                                    numberOfPages\n                                );\n                            }}\n                            variant=\"outline\"\n                        >\n                            <TiChevronLeftOutline />\n                        </CButton>\n                        {currentPage > 2 ? (\n                            <>\n                                <CButton\n                                    className=\"btn-user-pagination\"\n                                    onClick={() => capturePreviousPage(1, 1)}\n                                    variant=\"outline\"\n                                >\n                                    1\n                                </CButton>\n                                <span>...</span>\n                            </>\n                        ) : null}\n                        <CButton\n                            className=\"btn-user-pagination\"\n                            onClick={() => {\n                                capturePreviousPage(\n                                    previousPage,\n                                    numberOfPages\n                                );\n                            }}\n                            variant=\"outline\"\n                        >\n                            {previousPage}\n                        </CButton>\n                    </>\n                ) : null}\n                {currentPage == 0 ? (\n                    <CButton\n                        className=\"btn-user-pagination\"\n                        defaultChecked\n                        active={true}\n                    >\n                        {currentPage + 1}\n                    </CButton>\n                ) : (\n                    <CButton\n                        className=\"btn-user-pagination\"\n                        defaultChecked\n                        active={true}\n                    >\n                        {currentPage}\n                    </CButton>\n                )}\n                {currentPage === numberOfPages - 1 ? (\n                    <>\n                        <CButton\n                            className=\"btn-user-pagination\"\n                            onClick={() =>\n                                captureNextPage(nextPage, numberOfPages)\n                            }\n                            variant=\"outline\"\n                        >\n                            {nextPage}\n                        </CButton>\n                        <CButton\n                            className=\"btn-user-pagination\"\n                            onClick={() =>\n                                captureNextPage(nextPage, numberOfPages)\n                            }\n                            variant=\"outline\"\n                        >\n                            <TiChevronRightOutline />\n                        </CButton>\n                    </>\n                ) : null}\n                {nextPage < numberOfPages && nextPage !== '' ? (\n                    <>\n                        <CButton\n                            className=\"btn-user-pagination\"\n                            onClick={() =>\n                                captureNextPage(nextPage, numberOfPages)\n                            }\n                            variant=\"outline\"\n                        >\n                            {nextPage}\n                        </CButton>\n                        <span>...</span>\n                        <CButton\n                            className=\"btn-user-pagination\"\n                            onClick={() =>\n                                captureNextPage(numberOfPages, numberOfPages)\n                            }\n                            variant=\"outline\"\n                        >\n                            {numberOfPages}\n                        </CButton>\n                        <CButton\n                            className=\"btn-user-pagination\"\n                            onClick={() =>\n                                captureNextPage(nextPage, numberOfPages)\n                            }\n                            variant=\"outline\"\n                        >\n                            <TiChevronRightOutline />\n                        </CButton>\n                    </>\n                ) : null}\n            </div>\n        </CPagination>\n    );\n}\n\nexport default Pagination;\n","import React from 'react';\n\nfunction FormatDate() {\n    const date = new Date();\n    const dayWeek = {\n        0: 'Domingo',\n        1: 'Segunda-feira',\n        2: 'TerÃ§a-feira',\n        3: 'Quarta-feira',\n        4: 'Quinta-feira',\n        5: 'Sexta-feira',\n        6: 'SÃ¡bado',\n    };\n\n    const nameMonth = {\n        0: 'Janeiro',\n        1: 'Fevereiro',\n        2: 'MarÃ§o',\n        3: 'Abril',\n        4: 'Maio',\n        5: 'Junho',\n        6: 'Julho',\n        7: 'Agosto',\n        8: 'Setembro',\n        9: 'Outubro',\n        10: 'Novembro',\n        11: 'Dezembro',\n    };\n\n    const week = dayWeek[date.getDay()];\n    const day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\n    const month = nameMonth[date.getMonth()];\n    const year = date.getFullYear();\n    const hours =\n        date.getHours() < 10 ? `0${date.getHours()}` : date.getHours();\n    const minute =\n        date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes();\n\n    return (\n        <span\n            style={{ color: '#C4C4C4', fontSize: '14px' }}\n        >{`${week} - ${day} de ${month} ${year} - ${hours}:${minute}`}</span>\n    );\n}\n\nexport default FormatDate;\n","function MonthAndYear() {\n    const date = new Date();\n    const month = date.getMonth()\n    const year = date.getFullYear();\n\n    const nameMonth = {\n        0: 'Janeiro',\n        1: 'Fevereiro',\n        2: 'MarÃ§o',\n        3: 'Abril',\n        4: 'Maio',\n        5: 'Junho',\n        6: 'Julho',\n        7: 'Agosto',\n        8: 'Setembro',\n        9: 'Outubro',\n        10: 'Novembro',\n        11: 'Dezembro',\n    }\n\n  return (\n    `${nameMonth[month]} de ${year}`\n  )\n}\n\nexport default  MonthAndYear","import React, { useEffect, useState } from 'react';\nimport { CButton, CCol, CFormInput, CFormSelect, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle, CRow } from '@coreui/react';\n\nfunction UsersFilter({ filter, setFilter, name, saveFilter }) {\n    const [valueFilterCity, setValueFilterCity] = useState('');\n    const [valueFilterType, setValueFilterType] = useState('');\n    const [valueFilterStartDate, setValueFilterStartDate] = useState('');\n    const [valueFilterFinalDate, setValueFilterFinalDate] = useState('');\n\n    useEffect(() => {\n        return () => {\n            setValueFilterCity('')\n            setValueFilterType('')\n            setValueFilterStartDate('')\n            setValueFilterFinalDate('')\n        }\n    }, [])\n\n    return (\n        <CModal\n            visible={filter}\n            onClose={() => setFilter(false)}\n            size=\"lg\"\n            alignment=\"center\"\n        >\n            <CModalHeader>\n                <CModalTitle className=\"title-modal\">{`Filtrar - GrÃ¡fico ${name}`}</CModalTitle>\n            </CModalHeader>\n            <CModalBody>\n                <CRow className=\"mb-4\">\n                    <div className=\"title-filter\">\n                        Escolha os filtros\n                    </div>\n                    <CCol xs={4}>\n                        <h6>Cidade dos usuÃ¡rios</h6>\n                        <CFormSelect\n                            onChange={({ target }) => setValueFilterCity(target.value)}\n                            options={[\n                                'Cidade',\n                                { label: 'Belo Horizonte', value: 'Belo Horizonte' },\n                                { label: 'SÃ£o Paulo', value: 'SÃ£o Paulo' },\n                                { label: 'Rio de Janeiro', value: 'Rio de Janeiro' }\n                            ]}\n                        />\n                    </CCol>\n                    <CCol xs={4}>\n                        <h6>Tipo de usuÃ¡rios</h6>\n                        <CFormSelect\n                            onChange={({ target }) => setValueFilterStartDate(target.value)}\n                            options={[\n                                'Tipos',\n                                { label: 'Todos usuÃ¡rios', value: '1' },\n                                { label: 'UsuÃ¡rios novos', value: '2' },\n                                { label: 'UsuÃ¡rios recorrentes', value: '3' }\n                            ]}\n                        />\n                    </CCol>\n                </CRow>\n                <CRow>\n                    <div className=\"title-filter\">\n                        Escolha o intervalo de tempo\n                    </div>\n                    <CCol xs={3}>\n                        <h6>Data de inÃ­cio</h6>\n                        <div className=\"d-flex\">\n                            <CFormInput\n                                onChange={({ target }) => setValueFilterStartDate(target.value)}\n                                className=\"me-2\"\n                                type=\"date\"\n                            />\n                        </div>\n                    </CCol>\n                    <CCol xs={3}>\n                        <h6>Data de fim</h6>\n                        <div className=\"d-flex\">\n                            <CFormInput\n                                onChange={({ target }) => setValueFilterFinalDate(target.value)}\n                                className=\"me-2\"\n                                type=\"date\"\n                            />\n                        </div>\n                    </CCol>\n                </CRow>\n            </CModalBody>\n            <CModalFooter>\n                <CButton\n                    className='btn-cancel-global'\n                    variant='outline'\n                    onClick={() => setFilter(false)}\n                >\n                    Cancelar\n                </CButton>\n                <CButton\n                    className='btn-save-global'\n                    onClick={() => {\n                        saveFilter(valueFilterCity, valueFilterType, valueFilterStartDate, valueFilterFinalDate);\n                        setFilter(false);\n                    }}\n                >\n                    Salvar\n                </CButton>\n            </CModalFooter>\n        </CModal>\n    )\n}\n\nexport default UsersFilter","import React, { useEffect, useState } from 'react';\nimport { CButton, CCol, CFormInput, CFormSelect, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle, CRow } from '@coreui/react';\nimport FormatDate from 'src/views/tracking/components/FormatDate';\n\nfunction Reports({ report, setReport, name, saveReport }) {\n    const [valueReportCity, setValueReportCity] = useState('');\n    const [valueReportType, setValueReportType] = useState('');\n    const [valueReportStartDate, setValueReportStartDate] = useState('');\n    const [valueReportFinalDate, setValueReportFinalDate] = useState('');\n    const [modalReport, setModalReport] = useState(false);\n    const [city, setCity] = useState('');\n    const [period, setPeriod] = useState('');\n    const [typeUsers, setTypeUsers] = useState('');\n\n\n    useEffect(() => {\n        return () => {\n            setValueReportCity('')\n            setValueReportType('')\n            setValueReportStartDate('')\n            setValueReportFinalDate('')\n        }\n    }, [])\n\n    const downloadReports = (valueReportCity, valueReportType, valueReportStartDate, valueReportFinalDate) => {\n        const init = valueReportStartDate.split('-').splice(1).reverse().join('/');\n        const final = valueReportFinalDate.split('-').reverse().join('/');\n\n        setCity(valueReportCity);\n        setTypeUsers(valueReportType)\n        setPeriod(`PerÃ­odo: ${init} - ${final}`)\n    }\n\n    return modalReport ? (\n        <CModal\n            visible={report}\n            onClose={() => setModalReport(false)}\n            size=\"lg\"\n            alignment=\"center\"\n        >\n            <CModalHeader\n                className='d-block'\n                closeButton={false}\n            >\n                <CModalTitle className=\"title-modal\">{`RelatÃ³rio - GrÃ¡fico ${name}`}</CModalTitle>\n                <CModalTitle className=\"title-modal\">\n                    <span className='fs-6 color-text me-5'>{period}</span>\n                    <FormatDate />\n                </CModalTitle>\n            </CModalHeader>\n            <CModalBody>\n            <label>{typeUsers}</label>\n            </CModalBody>\n            <CModalFooter>\n                <CButton\n                    className='btn-cancel-global'\n                    variant='outline'\n                    onClick={() => setReport(false)}\n                >\n                    Cancelar\n                </CButton>\n                <CButton\n                    className='btn-save-global'\n                    onClick={() => {\n                        saveReport(valueReportCity, valueReportType, valueReportStartDate, valueReportFinalDate)\n\n                    }\n                    }\n                >\n                    Baixar relatÃ³rio\n                </CButton>\n            </CModalFooter>\n        </CModal>\n    ) : (\n        <CModal\n            visible={report}\n            onClose={() => setReport(false)}\n            size=\"lg\"\n            alignment=\"center\"\n        >\n            <CModalHeader>\n                <CModalTitle className=\"title-modal\">RelatÃ³rio</CModalTitle>\n            </CModalHeader>\n            <CModalBody>\n                <CRow className=\"mb-4\">\n                    <div className=\"title-filter\">\n                        Escolha os filtros\n                    </div>\n                    <CCol xs={4}>\n                        <h6>Cidade dos usuÃ¡rios</h6>\n                        <CFormSelect\n                            onChange={({ target }) => setValueReportCity(target.value)}\n                            options={[\n                                'Cidade',\n                                { label: 'Belo Horizonte', value: 'Belo Horizonte' },\n                                { label: 'SÃ£o Paulo', value: 'SÃ£o Paulo' },\n                                { label: 'Rio de Janeiro', value: 'Rio de Janeiro' }\n                            ]}\n                        />\n                    </CCol>\n                    <CCol xs={4}>\n                        <h6>Tipo dos usuÃ¡rios</h6>\n                        <CFormSelect\n                            onChange={({ target }) => setValueReportType(target.value)}\n                            options={[\n                                'Tipos',\n                                { label: 'Todos usuÃ¡rios', value: 'Todos usuÃ¡rios' },\n                                { label: 'UsuÃ¡rios novos', value: 'UsuÃ¡rios novos' },\n                                { label: 'UsuÃ¡rios recorrentes', value: 'UsuÃ¡rios recorrentes' }\n                            ]}\n                        />\n                    </CCol>\n                </CRow>\n                <CRow>\n                    <div className=\"title-filter\">\n                        Escolha o intervalo de tempo\n                    </div>\n                    <CCol xs={3}>\n                        <h6>Data de inÃ­cio</h6>\n                        <div className=\"d-flex\">\n                            <CFormInput\n                                onChange={({ target }) => setValueReportStartDate(target.value)}\n                                className=\"me-2\"\n                                type=\"date\"\n                            />\n                        </div>\n                    </CCol>\n                    <CCol xs={3}>\n                        <h6>Data de fim</h6>\n                        <div className=\"d-flex\">\n                            <CFormInput\n                                onChange={({ target }) => setValueReportFinalDate(target.value)}\n                                className=\"me-2\"\n                                type=\"date\"\n                            />\n                        </div>\n                    </CCol>\n                </CRow>\n            </CModalBody>\n            <CModalFooter>\n                <CButton\n                    className='btn-cancel-global'\n                    variant='outline'\n                    onClick={() => setReport(false)}\n                >\n                    Cancelar\n                </CButton>\n                <CButton\n                    className='btn-save-global'\n                    onClick={() => {\n                        setModalReport(true)\n                        downloadReports(valueReportCity, valueReportType, valueReportStartDate, valueReportFinalDate)\n                    }}\n                >\n                    Salvar\n                </CButton>\n            </CModalFooter>\n        </CModal>\n    )\n}\n\nexport default Reports","import React, { useState } from 'react'\nimport { CDropdown, CDropdownItem, CDropdownMenu, CDropdownToggle } from '@coreui/react'\n\nimport CIcon from '@coreui/icons-react'\nimport { cilOptions } from '@coreui/icons'\n\nimport Filter from '../modais/Filter';\nimport Reports from '../modais/Reports';\n\nimport '../css/modaisFilterReports.css';\n\nconst ButtonChart = ({ name, saveFilter, saveReport }) => {\n    const [filter, setFilter] = useState(false);\n    const [report, setReport] = useState(false);\n    const [a, seta] = useState(false);\n\n    return (\n        <>\n            <CDropdown\n                direction=\"dropstart\"\n            >\n                <CDropdownToggle\n                    caret={false}\n                    variant='ghost'\n                    color=\"link\"\n                    className=\"p-0\"\n                >\n                    <CIcon\n                        icon={cilOptions}\n                        size=\"lg\"\n                    />\n                </CDropdownToggle>\n                <CDropdownMenu>\n                    <CDropdownItem\n                        onClick={() => {setFilter(true)\n                        seta(true)}}\n                    >\n                        Filtrar...\n                    </CDropdownItem>\n                    <CDropdownItem\n                        onClick={() => setReport(true)}\n                    >\n                        Gerar relatÃ³rio...\n                    </CDropdownItem>\n                    <CDropdownItem>\n                        Fazer download...\n                    </CDropdownItem>\n                </CDropdownMenu>\n            </CDropdown>\n            <Filter name={name} filter={filter} setFilter={setFilter} saveFilter={saveFilter} />\n            <Reports name={name} report={report} setReport={setReport} saveReport={saveReport} />\n        </>\n    )\n}\n\nexport default ButtonChart;\n","import React from 'react'\nimport { CCard, CCardBody, CCol, CRow } from '@coreui/react'\nimport { CChart } from '@coreui/react-chartjs'\n\nimport MonthAndYear from '../components/MonthAndYear'\nimport ButtonGraph from '../buttons/ButtonGraph'\n\nconst ChartPlan = () => {\n    const saveFilter = (usersCity, usersType, initialDate, finalDate) => {\n        // endpoint para fazer o filtro\n    }\n\n    return (\n        <>\n            <CCard className=\"cards\">\n                <CCardBody>\n                    <CRow>\n                        <CCol>\n                            <label className=\"finc-title\">Planos</label>\n                            <br />\n                            <label className=\"finc-sub\"> <MonthAndYear /></label>\n                        </CCol>\n                        <CCol className='btn-filter'>\n                            <ButtonGraph name={'dos planos'} saveFilter={saveFilter} />\n                        </CCol>\n                    </CRow>\n\n                    <CChart\n                        type=\"bar\"\n                        options={{\n                            plugins: {\n                                legend: {\n                                    display: false,\n                                }\n                            }\n                        }}\n                        data={{\n                            datasets: [\n                                {\n                                    backgroundColor: ['#00F781', '#FF6711', '#FF2828'],\n                                    barPercentage: 0.7,\n                                    data: [40, 20, 10],\n                                }\n                            ],\n                            labels: ['Ativos', 'Em anÃ¡lise', 'Cancelado',],\n                        }}\n                        width={5}\n                        height={5}\n                    />\n                </CCardBody>\n            </CCard>\n        </>\n    )\n}\n\nexport default  ChartPlan","import React, { useState } from 'react'\nimport { CCard, CCardBody, CCol, CRow } from '@coreui/react'\nimport { CChart } from '@coreui/react-chartjs'\n\nimport ButtonGraph from '../buttons/ButtonGraph'\nimport MonthAndYear from '../components/MonthAndYear'\n\nconst ChartUsers = () => {\n    const [cardChartFilter, setCardChartFilter] = useState(false);\n    const [city, setCity] = useState('');\n    const [period, setPeriod] = useState('');\n    const [typeUsers, setTypeUsers] = useState('');\n\n    const bodyWeek = {\n        labels: ['Sem 1', 'Sem 2', 'Sem 3', 'Sem 4', 'Sem 5'],\n        newUsers: [40, 10, 20, 60, 20],\n        recurringUsers: [30, 30, 10, 10, 63],\n    }\n\n    const saveFilter = (usersCity, usersType, initialDate, finalDate) => {\n        const init = initialDate.split('-').splice(1).reverse().join('/');\n        const final = finalDate.split('-').splice(1).reverse().join('/');\n\n        setCardChartFilter(true)\n        setCity(usersCity);\n        setTypeUsers(usersType)\n        setPeriod(`PerÃ­odo: ${init} - ${final}`)\n        // endpoint para fazer o filtro\n    }\n\n    const saveReport = (usersCity, usersType, initialDate, finalDate) => {\n        \n    }\n\n    return cardChartFilter ? (\n        <CCard className=\"cards\">\n            <CCardBody>\n                <CRow>\n                    <CCol sm=\"auto pe-0\">\n                        <label className=\"finc-title\">Total de usuÃ¡rios - <span className='fs-6 color-text'>{city}</span></label>\n                        <br />\n                        <label className=\"finc-sub\"><MonthAndYear /> - <span className='color-text'> {period}</span> </label>\n                    </CCol>\n                    <CCol className='btn-filter ps-0'>\n                        <ButtonGraph\n                            name={'dos usuÃ¡rios'}\n                            saveFilter={saveFilter}\n                            saveReport={saveReport}\n                        />\n                    </CCol>\n                </CRow>\n\n                <CChart\n                    labels=\"week\"\n                    type=\"bar\"\n                    options={{\n                        plugins: {\n                            legend: {\n                                position: 'bottom',\n                                labels: {\n                                    padding: 8,\n                                    boxWidth: 30\n                                }\n                            },\n                        }\n                    }}\n                    data={{\n                        labels: bodyWeek.labels,\n                        datasets: [\n                            {\n                                label: 'UsuÃ¡rios novos',\n                                barPercentage: 0.6,\n                                backgroundColor: '#00F781',\n                                data: bodyWeek.newUsers,\n                            },\n                            {\n                                label: 'UsuÃ¡rios recorrentes',\n                                barPercentage: 0.6,\n                                backgroundColor: '#216CFF',\n                                data: bodyWeek.recurringUsers,\n                            },\n                        ],\n                    }}\n                    width={100}\n                    height={100}\n                />\n            </CCardBody>\n        </CCard>\n    ) : (\n        <CCard className=\"cards\">\n            <CCardBody>\n                <CRow>\n                    <CCol sm=\"auto\">\n                        <label className=\"finc-title\">Total de usuÃ¡rios</label>\n                        <br />\n                        <label className=\"finc-sub\"><MonthAndYear /></label>\n                    </CCol>\n                    <CCol className='btn-filter'>\n                        <ButtonGraph\n                            name={'dos usuÃ¡rios'}\n                            saveFilter={saveFilter}\n                            saveReport={saveReport}\n                        />\n                    </CCol>\n                </CRow>\n\n                <CChart\n                    labels=\"week\"\n                    type=\"bar\"\n                    options={{\n                        plugins: {\n                            legend: {\n                                position: 'bottom',\n                                labels: {\n                                    padding: 8,\n                                    boxWidth: 30\n                                }\n                            },\n                        }\n                    }}\n                    data={{\n                        labels: bodyWeek.labels,\n                        datasets: [\n                            {\n                                label: 'UsuÃ¡rios novos',\n                                barPercentage: 0.6,\n                                backgroundColor: '#00F781',\n                                data: bodyWeek.newUsers,\n                            },\n                            {\n                                label: 'UsuÃ¡rios recorrentes',\n                                barPercentage: 0.6,\n                                backgroundColor: '#216CFF',\n                                data: bodyWeek.recurringUsers,\n                            },\n                        ],\n                    }}\n                    width={100}\n                    height={100}\n                />\n            </CCardBody>\n        </CCard>\n    )\n}\n\nexport default ChartUsers;\n","import React, { useState } from \"react\"\nimport Calendar from \"react-calendar\"\nimport { CCard, CCardBody } from '@coreui/react'\n\nimport 'react-calendar/dist/Calendar.css';\n\nconst Calendar2 = () => {\n\n    const [value, onChange] = useState(new Date())\n\n    const [pessoas, setPessoas] = useState(22) // caso fizer alguma requisicao, utilizar aqui atÃ© carregar\n\n    if (pessoas == '') {\n        return (\n            <>\n                <h5>Loading ... </h5>\n            </>\n        )\n    } else {\n        return (\n            <Calendar\n                onChange={onChange}\n                value={value}\n                className='calendario'\n            />\n        )\n    }\n}\n\nexport default  Calendar2","import React, { useEffect, useState } from 'react'\nimport {\n    CTable,\n    CTableBody,\n    CTableDataCell,\n    CTableRow,\n    CCard,\n    CCardBody,\n    CTableHead,\n    CTableHeaderCell,\n    CForm,\n    CFormInput,\n    CButton,\n    CRow,\n    CCol,\n} from '@coreui/react'\nimport MonthAndYear from '../components/MonthAndYear';\nimport Pagination from '../../components/Pagination';\n\nimport '../css/users.css';\nimport { BiSearchAlt2 } from 'react-icons/bi';\n\nconst Users = () => {\n    const [op1, setOp1] = useState(true);\n    const [previousPage, setPreviousPage] = useState(\"\");\n    const [currentPage, setCurrentPage] = useState(1);\n    const [nextPage, setNextPage] = useState(\"\");\n    const [numberOfPages, setNumberOfPages] = useState(0);\n    const [defaulters, setDefaulters] = useState([])\n    const [nonDefaulters, setNonDefaulters] = useState([])\n\n    function initPages(e) {\n        if (e.data.totalPages > 1) {\n            setCurrentPage(1);\n            setNextPage(2);\n            setPreviousPage(\"\");\n        }\n    }\n\n    const [dados, setDados] = useState([\n        { adimplÃªncia: 'adimplentes', nContrato: 1, funcionario: 'GUstavo Alcantara', valor: 22.20, pagamento: '10/02/2022', placaVeiculo: 'KKK-345' },\n        { adimplÃªncia: 'inadimplentes', nContrato: 2, funcionario: 'Pedro da', valor: 12.20, pagamento: '10/02/2022', placaVeiculo: 'HHH-111' },\n        { adimplÃªncia: 'inadimplentes', nContrato: 3, funcionario: 'Gislene a', valor: 122.20, pagamento: '10/02/2022', placaVeiculo: 'KKK-345' },\n        { adimplÃªncia: 'inadimplentes', nContrato: 4, funcionario: 'Yuri Almeida', valor: 20.20, pagamento: '10/02/2022', placaVeiculo: 'KKK-123' },\n        { adimplÃªncia: 'inadimplentes', nContrato: 5, funcionario: 'GUstavo Alcantara', valor: 22.20, pagamento: '10/02/2022', placaVeiculo: 'KKK-345' },\n        { adimplÃªncia: 'inadimplentes', nContrato: 6, funcionario: 'Pedro d', valor: 12.20, pagamento: '10/02/2022', placaVeiculo: 'HHH-111' },\n        { adimplÃªncia: 'inadimplentes', nContrato: 7, funcionario: 'Gislene w', valor: 122.20, pagamento: '10/02/2022', placaVeiculo: 'KKK-345' },\n        { adimplÃªncia: 'adimplentes', nContrato: 8, funcionario: 'Yuri Almeida', valor: 20.20, pagamento: '10/02/2022', placaVeiculo: 'KKK-123' },\n        { adimplÃªncia: 'adimplentes', nContrato: 9, funcionario: 'GUstavo a', valor: 22.20, pagamento: '10/02/2022', placaVeiculo: 'KKK-345' },\n        { adimplÃªncia: 'adimplentes', nContrato: 10, funcionario: 'Pedro a', valor: 12.20, pagamento: '10/02/2022', placaVeiculo: 'HHH-111' },\n\n    ])\n\n\n    useEffect(() => {\n        choiceNonDefaulters();\n        initPages({ data: { totalPages: 10 } })\n        setNumberOfPages(4)\n    }, [])\n\n    function page(e) {\n        //     setDados([]);\n        // const config = configCookies()\n\n        //     axios\n        //         .get(\n        //             `${UrlDomain}/signatures?pageSize=${qtdPgns}&pageNumber=${e}`,\n        //             config\n        //         )\n        //         .then((response) => {\n        //             setDados(response.data.content);\n        //             setNumberOfPages(response.data.totalPages);\n        //         })\n        //         .catch((r) => {\n        //             console.log(\"error\", r),\n        //                 alert(\"Login expirado\"),\n        //                 window.location.reload();\n        //         });\n    }\n\n    const choiceDefaulters = () => {\n        setOp1(false)\n        const inadiplentes = dados.filter((dado) => dado.adimplÃªncia == 'inadimplentes');\n        setDefaulters(inadiplentes)\n    };\n\n    const choiceNonDefaulters = () => {\n        setOp1(true)\n        const adiplentes = dados.filter((dado) => dado.adimplÃªncia == 'adimplentes');\n        setNonDefaulters(adiplentes)\n    };\n\n    return (\n        <CCard className=\"cards-customers\">\n            <CCardBody>\n                <CRow>\n                    <CCol>\n                        <label className=\"finc-title\">Clientes inadimplentes e adimplentes</label>\n                        <br />\n                        <label className=\"finc-sub\"> <MonthAndYear /></label>\n                    </CCol>\n\n                    <CCol className=\"d-md-flex justify-content-md-end\">\n                        <CForm className=\"row g-3\">\n                            <CCol className=\"d-flex  justify-content-end\">\n                                <div className=\"d-flex\">\n                                    <i\n                                        className='icon-search-global i-absolute-global'\n                                    >\n                                        <BiSearchAlt2 color=\"#6D6D6D\"\n                                        />\n                                    </i>\n                                    <CFormInput\n                                        className=\"input-search-global\"\n                                        type=\"search\"\n                                        placeholder=\"Pesquisar\" />\n                                </div>\n                                <CButton\n                                    variant='outline'\n                                    className=\"btn-search-global\"\n                                >\n                                    Buscar\n                                </CButton>\n                            </CCol>\n                            <div className='text-end'>\n                                <CButton className='btn-save-global px-2'>\n                                    Baixar planilha\n                                </CButton>\n                            </div>\n                        </CForm>\n                    </CCol>\n                </CRow>\n                <CRow className=\"pt-3\">\n                    <CCol\n                        className={\n                            op1 === true\n                                ? \"nav-non-defaulters-active\" : \"nav-non-defaulters\"\n\n                        }\n                        onClick={choiceNonDefaulters}\n                    >\n                        <label>Adimplentes</label>\n                    </CCol>\n                    <CCol\n                        className={\n                            op1 === false\n                                ?\n                                \"nav-defaulters-active\"\n                                : \"nav-defaulters\"\n                        }\n                        onClick={choiceDefaulters}\n                    >\n                        <label>Inadimplentes</label>\n                    </CCol>\n                    <CCol></CCol>\n                    <CCol></CCol>\n                    <hr />\n                </CRow>\n\n                <CTable striped hover>\n                    <CTableHead>\n                        <CTableRow>\n                            <CTableHeaderCell scope=\"col\">Nome do usuÃ¡rio</CTableHeaderCell>\n                            <CTableHeaderCell scope=\"col\">Placa do veÃ­culo</CTableHeaderCell>\n                            <CTableHeaderCell scope=\"col\">NÂº do contrato</CTableHeaderCell>\n                            <CTableHeaderCell scope=\"col\">Ãltimo pagamento</CTableHeaderCell>\n                            <CTableHeaderCell scope=\"col\">Valor</CTableHeaderCell>\n                        </CTableRow>\n                    </CTableHead>\n                    <CTableBody>\n                        {\n                            op1 === true ?\n                                nonDefaulters.map((i, index) => (\n                                    <CTableRow key={index.toString()}>\n                                        <CTableDataCell>\n                                            {i.funcionario}\n                                        </CTableDataCell>\n                                        <CTableDataCell>\n                                            {i.placaVeiculo}\n                                        </CTableDataCell>\n                                        <CTableDataCell>\n                                            {i.nContrato}\n                                        </CTableDataCell>\n                                        <CTableDataCell>\n                                            {i.pagamento}\n                                        </CTableDataCell>\n                                        <CTableDataCell>\n                                            {` R$ ${i.valor.toFixed(2).replace('.', ',')}`}\n                                        </CTableDataCell>\n                                    </CTableRow>\n                                )) : defaulters.map((i, index) => (\n                                    <CTableRow key={index.toString()}>\n                                        <CTableDataCell>\n                                            {i.funcionario}\n                                        </CTableDataCell>\n                                        <CTableDataCell>\n                                        </CTableDataCell>\n                                        <CTableDataCell>\n                                            {i.nContrato}\n                                        </CTableDataCell>\n                                        <CTableDataCell>\n                                            {i.pagamento}\n                                        </CTableDataCell>\n                                        <CTableDataCell>\n                                            {` R$ ${i.valor.toFixed(2).replace('.', ',')}`}\n                                        </CTableDataCell>\n                                    </CTableRow>\n                                ))}\n                    </CTableBody>\n                </CTable>\n            </CCardBody>\n            <Pagination page={page} numberOfPages={numberOfPages} previousPage={previousPage} setPreviousPage={setPreviousPage} currentPage={currentPage} setCurrentPage={setCurrentPage} nextPage={nextPage} setNextPage={setNextPage} name={'funcionÃ¡rios'} />\n        </CCard>\n    )\n}\n\nexport default Users;\n","import React from 'react'\nimport { CCard, CCardBody, CCol, CRow } from '@coreui/react';\nimport { CChart } from '@coreui/react-chartjs';\n\nimport MonthAndYear from '../components/MonthAndYear';\nimport ButtonGraph from '../buttons/ButtonGraph';\n\nfunction ToppingsAndDevices() {\n    const saveFilterToppings = (usersCity, usersType, initialDate, finalDate) => {\n        // endpoint para fazer o filtro\n    }\n\n    const saveFilterDevices = (usersCity, usersType, initialDate, finalDate) => {\n        // endpoint para fazer o filtro\n    }\n\n    return (\n        <>\n            <CCard className=\"cards-toppings-and-devices mb-2\">\n                <CCardBody>\n                    <CRow>\n                        <CCol>\n                            <label className=\"finc-title\">Coberturas</label>\n                            <br />\n                            <label className=\" finc-sub\"> <MonthAndYear /></label>\n                        </CCol>\n                        <CCol className='btn-filter'>\n                            <ButtonGraph name={'das coberturas'} saveFilter={saveFilterToppings} />\n                        </CCol>\n                    </CRow>\n                    <CChart\n                        type=\"doughnut\"\n                        options={{\n                            plugins: {\n                                legend: {\n                                    position: 'bottom',\n                                },\n                            }\n                        }}\n                        data={{\n                            labels: ['ProteÃ§Ã£o de danos materiais', 'Chaveiro', 'ColisÃ£o de Perda Total', 'ColisÃ£o de Danos Parciais', 'Cobertura de vidros'],\n                            datasets: [\n                                {\n                                    backgroundColor: ['#216CFF', '#FF6711', '#00F781', '#FE3F61', '#14142B'],\n                                    data: [40, 20, 80, 10, 30],\n                                },\n                            ],\n                        }}\n                    />\n                </CCardBody>\n            </CCard>\n            <CCard className=\"cards-toppings-and-devices\">\n                <CCardBody>\n                    <CRow>\n                        <CCol>\n                            <label className=\"finc-title\">Dispositivos</label>\n                            <br />\n                            <label className=\" finc-sub\"> <MonthAndYear /></label>\n                        </CCol>\n                        <CCol className='btn-filter'>\n                            <ButtonGraph name={'dos dispositivos'} saveFilter={saveFilterDevices} />\n                        </CCol>\n                    </CRow>\n                    <CChart\n                        className=\"devices-width\"\n                        type=\"doughnut\"\n                        options={{\n                            layout: {\n                                padding: 40\n                            },\n                            plugins: {\n                                legend: {\n                                    position: 'bottom',\n                                },\n                            },\n                        }}\n                        data={{\n                            labels: ['Sincronizados', 'Inativos'],\n                            datasets: [\n                                {\n                                    backgroundColor: ['#00F781', '#1B54BD'],\n                                    data: [40, 20],\n                                },\n                            ],\n                        }}\n                    />\n                </CCardBody>\n            </CCard>\n        </>\n    )\n}\n\nexport default  ToppingsAndDevices;\n","import React from \"react\";\nimport { CCol, CRow } from '@coreui/react';\n\nimport GraphPlans from './charts/ChartPlans';\nimport GraphUsers from './charts/ChartUsers';\nimport Calendar from './charts/Calendar';\nimport Users from './users/Users';\nimport ToppingsAndDevices from \"./charts/ToppingsAndDevices\";\n\nimport './css/finance.css';\n\nconst Finance = () => {\n    return (\n        <>\n            <CRow>\n                <CCol xs={4}>\n                    <GraphUsers />\n                </CCol>\n                <CCol xs={4}>\n                    <GraphPlans />\n                </CCol>\n                <CCol xs={4}>\n                    <Calendar />\n                </CCol>\n            </CRow>\n            <br />\n            <CRow>\n                <CCol xs={8}>\n                    <Users />\n                </CCol>\n                <CCol xs={4}>\n                    <ToppingsAndDevices />\n                </CCol>\n            </CRow>\n        </>\n    )\n}\n\nexport default  Finance;\n"],"sourceRoot":""}