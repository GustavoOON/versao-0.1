{"version":3,"sources":["../node_modules/classnames/index.js","../node_modules/react-bootstrap/esm/ThemeProvider.js","config.js","../node_modules/react-bootstrap/esm/Spinner.js","views/plans/render/components/ModalFilter.jsx","views/plans/render/btn/BtnFilter.jsx","views/plans/render/GraphicPlan.jsx","views/plans/render/Scratchs.jsx","views/plans/render/btn/BtnAddPlan.jsx","views/plans/render/imput/ImputSearch.jsx","views/plans/render/btn/BtnEditPlan.jsx","views/plans/render/components/ActiveAndInactivePlan.jsx","views/plans/render/AddPlans.jsx","views/plans/Plans.jsx"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default","ThemeContext","React","prefixes","Consumer","Provider","useBootstrapPrefix","prefix","defaultPrefix","useContext","configCookies","token","Cookies","get","headers","Authorization","urlDomain","Spinner","ref","bsPrefix","variant","animation","size","as","Component","className","props","bsSpinnerPrefix","_jsx","displayName","ModalFilter","filter","setFilter","saveFilter","useState","valueFilterStartDate1","setValueFilterStartDate1","valueFilterFinalDate1","setValueFilterFinalDate1","valueFilterStartDate2","setValueFilterStartDate2","valueFilterFinalDate2","setValueFilterFinalDate2","useEffect","visible","onClose","alignment","xs","onChange","target","value","type","onClick","BtnFilter","caret","color","icon","cilOptions","GraphicPlan","random","min","max","Math","floor","data","labels","datasets","label","backgroundColor","borderColor","pointBorderColor","options","maintainAspectRatio","plugins","legend","position","display","scales","x","grid","drawOnChartArea","y","ticks","beginAtZero","maxTicksLimit","stepSize","ceil","elements","line","point","radius","hitRadius","hoverRadius","hoverBorderWidth","Scratchs","dados","setDados","config","axios","then","response","catch","r","attScratchs","striped","hover","scope","map","item","index","to","until","krisk","exposition","BtnAddPlan","savePlan","setVisible","customize","setCustomize","fixed","setFixed","finalKmValue","setFinalKmValue","namePlan","setNamePlan","coberturas","name","cusFixed","valueKm","cobertura","htmlFor","id","placeholder","toFixed","replace","disabled","cols","zero","sign","toppingsFixed","c","toppingsCustomize","sort","a","b","removeFixedCovers","checked","toppings","addFixedCoverage","ImputSearch","BtnEditPlan","sum","ActiveAndInactivePlan","op1","setOp1","op2","setOp2","readOnly","multiple","AddPlans","Plans"],"mappings":"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","file":"static/js/16.8e70496c.chunk.js","sourcesContent":["/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import * as React from 'react';\nimport { useContext, useMemo } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ThemeContext = /*#__PURE__*/React.createContext({\n  prefixes: {}\n});\nconst {\n  Consumer,\n  Provider\n} = ThemeContext;\n\nfunction ThemeProvider({\n  prefixes = {},\n  dir,\n  children\n}) {\n  const contextValue = useMemo(() => ({\n    prefixes: { ...prefixes\n    },\n    dir\n  }), [prefixes, dir]);\n  return /*#__PURE__*/_jsx(Provider, {\n    value: contextValue,\n    children: children\n  });\n}\n\nexport function useBootstrapPrefix(prefix, defaultPrefix) {\n  const {\n    prefixes\n  } = useContext(ThemeContext);\n  return prefix || prefixes[defaultPrefix] || defaultPrefix;\n}\nexport function useIsRTL() {\n  const {\n    dir\n  } = useContext(ThemeContext);\n  return dir === 'rtl';\n}\n\nfunction createBootstrapComponent(Component, opts) {\n  if (typeof opts === 'string') opts = {\n    prefix: opts\n  };\n  const isClassy = Component.prototype && Component.prototype.isReactComponent; // If it's a functional component make sure we don't break it with a ref\n\n  const {\n    prefix,\n    forwardRefAs = isClassy ? 'ref' : 'innerRef'\n  } = opts;\n  const Wrapped = /*#__PURE__*/React.forwardRef(({ ...props\n  }, ref) => {\n    props[forwardRefAs] = ref;\n    const bsPrefix = useBootstrapPrefix(props.bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Component, { ...props,\n      bsPrefix: bsPrefix\n    });\n  });\n  Wrapped.displayName = `Bootstrap(${Component.displayName || Component.name})`;\n  return Wrapped;\n}\n\nexport { createBootstrapComponent, Consumer as ThemeConsumer };\nexport default ThemeProvider;","import Cookies from \"js-cookie\";\n\n// Endereço padrão das API\n\nconst prod = \"http://dashboardbff.oonpayperuse.com.br\";\nconst dev = \"http://localhost:8080\";\n\nconst tokenMaps = \"AIzaSyB9I7snvZRRQ6faupULeBXYz5tU2AUuWek\"; // TOKEN PESSOAL\nconst urlDomain = prod;\n\nexport const configCookies = () => {\n    const token = Cookies.get(\"TokenID\");\n\n    const authorization = {\n        headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json;charset=UTF-8\",\n            \"Access-Control-Allow-Origin\": \"*\",\n        },\n    };\n\n    return authorization;\n};\n\nexport default  urlDomain;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Spinner = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  variant,\n  animation,\n  size,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  className,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'spinner');\n  const bsSpinnerPrefix = `${bsPrefix}-${animation}`;\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsSpinnerPrefix, size && `${bsSpinnerPrefix}-${size}`, variant && `text-${variant}`)\n  });\n});\nSpinner.displayName = 'Spinner';\nexport default Spinner;","import React, { useEffect, useState } from 'react';\nimport { CButton, CCol, CFormInput, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle, CRow } from '@coreui/react';\n\nimport '../../css/modalFilter.css'\n\nfunction ModalFilter({ filter, setFilter, saveFilter }) {\n    const [valueFilterStartDate1, setValueFilterStartDate1] = useState('');\n    const [valueFilterFinalDate1, setValueFilterFinalDate1] = useState('');\n    const [valueFilterStartDate2, setValueFilterStartDate2] = useState('');\n    const [valueFilterFinalDate2, setValueFilterFinalDate2] = useState('');\n\n    useEffect(() => {\n        return () => {\n            setValueFilterStartDate1('')\n            setValueFilterFinalDate1('')\n            setValueFilterStartDate2('')\n            setValueFilterFinalDate2('')\n        }\n    }, [])\n\n    return (\n        <CModal\n            visible={filter}\n            onClose={() => setFilter(false)}\n            size=\"lg\"\n            alignment=\"center\"\n        >\n            <CModalHeader>\n                <CModalTitle className=\"title-modal\">Filtrar</CModalTitle>\n            </CModalHeader>\n            <CModalBody>\n                <CRow>\n                    <div className=\"title-filter\">\n                        Escolha o intervalo de tempo - Linha 1\n                    </div>\n                    <CCol xs={3}>\n                        <h6>Data de início</h6>\n                        <div className=\"d-flex\">\n                            <CFormInput\n                                onChange={({ target }) => setValueFilterStartDate1(target.value)}\n                                className=\"me-2\"\n                                type=\"date\"\n                            />\n                        </div>\n                    </CCol>\n                    <CCol xs={3}>\n                        <h6>Data de fim</h6>\n                        <div className=\"d-flex\">\n                            <CFormInput\n                                onChange={({ target }) => setValueFilterFinalDate1(target.value)}\n                                className=\"me-2\"\n                                type=\"date\"\n                            />\n                        </div>\n                    </CCol>\n                </CRow>\n                <CRow>\n                    <div className=\"title-filter mt-4\">\n                        Escolha o intervalo de tempo - Linha 2\n                    </div>\n                    <CCol xs={3}>\n                        <h6>Data de início</h6>\n                        <div className=\"d-flex\">\n                            <CFormInput\n                                onChange={({ target }) => setValueFilterStartDate2(target.value)}\n                                className=\"me-2\"\n                                type=\"date\"\n                            />\n                        </div>\n                    </CCol>\n                    <CCol xs={3}>\n                        <h6>Data de fim</h6>\n                        <div className=\"d-flex\">\n                            <CFormInput\n                                onChange={({ target }) => setValueFilterFinalDate2(target.value)}\n                                className=\"me-2\"\n                                type=\"date\"\n                            />\n                        </div>\n                    </CCol>\n                </CRow>\n            </CModalBody>\n            <CModalFooter>\n                <CButton\n                    className='btn-cancel-global'\n                    variant='outline'\n                    onClick={() => setFilter(false)}\n                >\n                    Cancelar\n                </CButton>\n                <CButton\n                    onClick={() => saveFilter(\n                        valueFilterStartDate1,\n                        valueFilterFinalDate1,\n                        valueFilterStartDate2,\n                        valueFilterFinalDate2,\n                    )}\n                    className='btn-save-global'\n                >\n                    Salvar\n                </CButton>\n            </CModalFooter>\n        </CModal>\n    )\n}\n\nexport default ModalFilter;\n","import React, { useState } from 'react';\nimport { cilOptions } from '@coreui/icons';\nimport CIcon from '@coreui/icons-react';\nimport { CDropdown, CDropdownItem, CDropdownMenu, CDropdownToggle } from '@coreui/react';\nimport ModalFilter from '../components/ModalFilter';\n\nfunction BtnFilter({ saveFilter }) {\n    const [filter, setFilter] = useState(false);\n    const [report, setReport] = useState(false);\n\n    return (\n        <>\n            <CDropdown>\n                <CDropdownToggle\n                    caret={false}\n                    variant='ghost'\n                    color=\"link\"\n                    className=\"p-0\"\n                >\n                    <CIcon icon={cilOptions} size=\"lg\" />\n                </CDropdownToggle>\n                <CDropdownMenu>\n                    <CDropdownItem onClick={() => setFilter(true)}>Filtrar...</CDropdownItem>\n                    <CDropdownItem>Gerar relatório...</CDropdownItem>\n                    <CDropdownItem>Fazer download...</CDropdownItem>\n                </CDropdownMenu>\n            </CDropdown>\n\n            <ModalFilter filter={filter} setFilter={setFilter} saveFilter={saveFilter} />\n        </>\n    )\n}\n\nexport default  BtnFilter","import React from 'react';\nimport { CCard, CCardBody, CCol, CRow } from '@coreui/react';\nimport { CChart } from '@coreui/react-chartjs';\n\nimport BtnFilter from './btn/BtnFilter';\n\nimport '../css/graphicPlan.css';\n\nfunction GraphicPlan() {\n    const random = (min, max) => {\n        return Math.floor(Math.random() * (max - min + 1) + min)\n    }\n\n    return (\n        <CCard className='card'>\n            <CCardBody>\n                <CRow>\n                    <CCol>\n                        <label className=\"plan-title\">Planos ativos</label >\n                        <br />\n                        <label className=\"plan-sub\">Dezembro 2022</label>\n                    </CCol>\n                    <CCol className='btn-filter'>\n                        <BtnFilter />\n                    </CCol>\n                </CRow>\n                <CChart\n                    type=\"line\"\n                    data={{\n                        labels: ['Sem 1', 'Sem 2', 'Sem 3', 'Sem 4', 'Sem 5'],\n                        datasets: [\n                            {\n                                label: 'Atendimentos abertos',\n                                backgroundColor: '#216CFF',\n                                borderColor: \"#216CFF\",\n                                pointBorderColor: \"#fff\",\n                                data: [\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                ],\n                            },\n                            {\n                                label: 'Atendimentos encerrados',\n                                backgroundColor: '#00F781',\n                                borderColor: \"#00F781\",\n                                pointBorderColor: \"#fff\",\n                                data: [\n                                    random(50, 250),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                ],\n                            },\n\n                        ],\n                    }}\n                    options={{\n                        maintainAspectRatio: false,\n                        plugins: {\n                            legend: {\n                                position: 'bottom',\n                                display: true,\n                            },\n                        },\n                        scales: {\n                            x: {\n                                grid: {\n                                    drawOnChartArea: false,\n                                },\n                            },\n                            y: {\n                                ticks: {\n                                    beginAtZero: true,\n                                    maxTicksLimit: 5,\n                                    stepSize: Math.ceil(250 / 5),\n                                    max: 250,\n                                },\n                            },\n                        },\n                        elements: {\n                            line: {\n                                // tension: 0.2,\n                            },\n                            point: {\n                                radius: 0,\n                                hitRadius: 10,\n                                hoverRadius: 4,\n                                hoverBorderWidth: 3,\n                            },\n                        },\n                    }}\n                    className=\"chart-line\"\n                />\n            </CCardBody>\n        </CCard>\n    )\n}\n\nexport default GraphicPlan;\n","import React, { useEffect, useState } from 'react'\nimport { CTable, CTableBody, CTableDataCell, CTableHead, CTableHeaderCell, CTableRow, CCard, CCardBody, CRow, CCol, CButton } from '@coreui/react'\nimport axios from 'axios'\nimport { Spinner } from 'react-bootstrap'\n\nimport urlDomain, { configCookies } from 'src/config'\n\nimport '../css/scratchs.css'\n\nfunction Scratchs() {\n    const [dados, setDados] = useState([]);\n\n    useEffect(() => {\n        const config = configCookies()\n\n        axios\n            .get(`${urlDomain}/risks`, config)\n            .then((response) => {\n                setDados(response.data)\n            })\n            .catch(r => {\n                //console.log('error', r), alert('Login expirados'),window.location.reload()\n            })\n    }, [])\n\n    const attScratchs = () => {\n        const config = configCookies()\n        axios\n            .get(`${urlDomain}/risks`, config)\n            .then((response) => {\n                setDados(response.data)\n            })\n            .catch(r => {\n                //console.log('error', r), alert('Login expirados'),window.location.reload()\n            })\n    }\n\n\n    return (\n        <CCard className='card'>\n            <CCardBody>\n                <CRow>\n                    <CCol>\n                        <label className=\"plan-title\">Riscos</label >\n                    </CCol>\n                    <CCol className='btn-filter'>\n                        <CButton\n                            className='btn-save-global'\n                            onClick={() => attScratchs()}\n                        >\n                            Atualizar\n                        </CButton>\n                    </CCol>\n                </CRow>\n                <br />\n                {dados.length == 0 ?\n                    <>\n                        <h4> <Spinner animation=\"grow\" variant=\"info\" /></h4>\n                        <br />\n                    </> :\n                    <div className=\"table-overflow\">\n                        <CTable striped hover>\n                            <CTableHead>\n                                <CTableRow>\n                                    <CTableHeaderCell scope=\"col\">Valor mínimo do veículo</CTableHeaderCell>\n                                    <CTableHeaderCell scope=\"col\">Valor máximo do veículo</CTableHeaderCell>\n                                    <CTableHeaderCell scope=\"col\">Constante de risco</CTableHeaderCell>\n                                    <CTableHeaderCell scope=\"col\">Variável de exposição</CTableHeaderCell>\n                                </CTableRow>\n                            </CTableHead>\n                            <CTableBody >\n                                {dados.map((item, index) => {\n                                    return (\n                                        <CTableRow key={index.toString()}>\n                                            <CTableDataCell className=\"valorMin\">\n                                                <p> R$ {item.to} </p>\n                                            </CTableDataCell>\n\n                                            <CTableDataCell color='secondary' className=\"text-center\">\n                                                <p> R$ {item.until} </p>\n                                            </CTableDataCell>\n\n                                            <CTableDataCell className=\"text-center\">\n                                                <p> {item.krisk} </p>\n                                            </CTableDataCell>\n\n                                            <CTableDataCell color='secondary' className=\"text-center\">\n                                                <p> {item.exposition} </p>\n                                            </CTableDataCell>\n                                        </CTableRow>\n                                    )\n                                })}\n                            </CTableBody>\n                        </CTable>\n                    </div>\n                }\n            </CCardBody>\n        </CCard>\n    )\n}\n\nexport default Scratchs","import React, { useEffect, useState } from 'react'\nimport { CButton, CCol, CForm, CFormCheck, CFormInput, CFormLabel, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle, CRow } from '@coreui/react'\n\nfunction BtnAddPlan({ savePlan }) {\n    const [visible, setVisible] = useState(false);\n    const [customize, setCustomize] = useState([]);\n    const [fixed, setFixed] = useState([]);\n    const [finalKmValue, setFinalKmValue] = useState(0);\n    const [namePlan, setNamePlan] = useState('');\n\n    const coberturas = [\n        { name: 'Alagamentos', cusFixed: false, valueKm: 0.02 },\n        { name: 'Assistência 24h', cusFixed: false, valueKm: 0.01 },\n        { name: 'Chaveiro', cusFixed: false, valueKm: 0.01 },\n        { name: 'Colisão de danos parciais', cusFixed: false, valueKm: 0.03 },\n        { name: 'Colisão de perda total', cusFixed: false, valueKm: 0.01 },\n        { name: 'Incêndio', cusFixed: false, valueKm: 0.02 },\n        { name: 'Proteção de danos materiais', cusFixed: false, valueKm: 0.02 }\n    ]\n\n    useEffect(() => {\n        coberturas.map((cobertura) => {\n            customize.push(cobertura)\n        })\n    }, [])\n\n    const addFixedCoverage = (valueKm, name) => {\n        setFinalKmValue(finalKmValue + valueKm)\n        setFixed([...fixed, { name, cusFixed: false, valueKm }])\n        const toppings = customize.filter((c) => c.name != name);\n\n        const sort = [...toppings, { name, cusFixed: true }].sort(function (a, b) {\n            if (a.name > b.name) return 1;\n            if (a.name < b.name) return -1;\n            return 0;\n        });\n\n        setCustomize(sort)\n    }\n\n    const removeFixedCovers = (valueKm, name) => {\n        const zero = finalKmValue - valueKm;\n        Math.sign(zero) != -1 ? setFinalKmValue(zero)\n            : setFinalKmValue(0)\n        const toppingsFixed = fixed.filter((c) => c.name != name);\n\n        setFixed(toppingsFixed);\n\n        const toppingsCustomize = customize.filter((c) => c.name != name);\n\n        const sort = [...toppingsCustomize, { name, cusFixed: false, valueKm }].sort(function (a, b) {\n            if (a.name > b.name) return 1;\n            if (a.name < b.name) return -1;\n            return 0;\n        });\n\n        setCustomize(sort)\n\n    }\n\n    return (\n        <>\n            <CButton\n                className='btn-save-global'\n                size='lg'\n                onClick={() => setVisible(!visible)}\n            >\n                Adicionar plano\n            </CButton>\n            <CModal\n                alignment=\"center\"\n                size='xl'\n                visible={visible}\n                onClose={() => setVisible(false)}\n            >\n                <CModalHeader>\n                    <CModalTitle className=\"title-modal\">Adicionar plano</CModalTitle>\n                </CModalHeader>\n                <CModalBody>\n                    <CRow>\n                        <CCol>\n                            <CForm>\n                                <CFormLabel\n                                    htmlFor=\"name-plan\"\n                                >\n                                    Nome do plano\n                                </CFormLabel>\n                                <CFormInput\n                                    id=\"name-plan\"\n                                    type=\"text\"\n                                    placeholder=\"Plano principal\"\n                                    className='inputs-edit-plan'\n                                    onChange={({ target }) => setNamePlan(target.value)}\n                                />\n                            </CForm>\n                        </CCol>\n                        <CCol>\n                            <CForm>\n                                <CFormLabel\n                                    htmlFor=\"value-km-plan\"\n                                >\n                                    Valor do km (R$)\n                                </CFormLabel>\n                                <CFormInput\n                                    id=\"value-km-plan\"\n                                    label=\"Valor do km (R$)\"\n                                    type=\"text\"\n                                    placeholder=\"R$ 0,06\"\n                                    className='inputs-edit-plan'\n                                    value={`R$ ${finalKmValue.toFixed(2).replace('.', ',')}`}\n                                    disabled\n                                />\n                            </CForm>\n                        </CCol>\n                    </CRow>\n                    <CRow>\n                        <CCol className='mt-4'>\n                            <p>Selecione as coberturas fixas para o plano:</p>\n                            <p>COBERTURAS FIXAS</p>\n                            <CRow xs={{ cols: 4 }} className=\"p-2\">\n                                {fixed ? fixed.map(({ name, valueKm }, key) => (\n                                    <CCol key={key} className='check-plan my-1 py-2'>\n                                        <CFormCheck\n                                            id={`${name}-fixed`}\n                                            value={name}\n                                            label={name}\n                                            onChange={() => removeFixedCovers(valueKm, name)}\n                                            checked\n                                        />\n                                    </CCol>\n                                )) : null}\n                            </CRow>\n                        </CCol>\n                        <CRow>\n                            <CCol className='mt-2'>\n                                <p>COBERTURAS CUSTOMIZÁVEIS</p>\n                                <CRow xs={{ cols: 4 }} className=\"p-2\">\n                                    {customize ? customize.map(({ name, cusFixed, valueKm }, key) => (\n                                        <CCol key={key} className='check-plan my-1 py-2'>\n                                            <CFormCheck\n                                                id={`${name}-customize`}\n                                                label={name}\n                                                onChange={() => addFixedCoverage(valueKm, name)}\n                                                disabled={cusFixed}\n                                                checked={cusFixed}\n                                            />\n                                        </CCol>\n                                    )) : null}\n                                </CRow>\n                            </CCol>\n                        </CRow>\n                    </CRow>\n                </CModalBody>\n                <CModalFooter>\n                    <CButton\n                        className='btn-cancel-global'\n                        variant='outline'\n                        onClick={() => setVisible(false)}\n                    >\n                        Cancelar\n                    </CButton>\n                    <CButton\n                        onClick={() => savePlan(\n                            namePlan,\n                            finalKmValue,\n                            customize,\n                            fixed,\n                        )}\n                        className='btn-save-global'\n                    >\n                        Salvar\n                    </CButton>\n                </CModalFooter>\n            </CModal>\n        </>\n    )\n}\n\nexport default BtnAddPlan;\n","import { CButton, CCol, CForm, CFormInput, CFormLabel } from '@coreui/react'\nimport React from 'react';\nimport { BiSearchAlt2 } from 'react-icons/bi';\n\nimport BtnAddPlan from '../btn/BtnAddPlan'\n\nfunction ImputSearch({ savePlan }) {\n    return (\n        <CForm className=\"justify-content-end d-flex\">\n            <CCol xs=\"auto\" className='d-flex'>\n                <div className=\"container-icon-input\">\n                    <i\n                        className='icon-search-global  i-absolute-global'\n                    >\n                        <BiSearchAlt2 color=\"#6D6D6D\" />\n                    </i>\n                    <CFormInput\n                        className=\"input-search-global\"\n                        type=\"text\"\n                        placeholder=\"Pesquisar\"\n                    />\n                </div>\n                <CButton\n                    type=\"button\"\n                    variant='outline'\n                    className=\"btn-search-global me-4\"\n                >\n                    Buscar\n                </CButton>\n            </CCol>\n            <CCol xs=\"auto\">\n                <BtnAddPlan />\n            </CCol>\n        </CForm>\n    )\n}\n\nexport default ImputSearch","import React, { useEffect, useState } from 'react';\nimport { CButton, CCol, CForm, CFormCheck, CFormInput, CFormLabel, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle, CRow } from '@coreui/react';\n\nimport '../../css/btnEditPlan.css'\n\nfunction BtnEditPlan({ savePlan }) {\n    const [visible, setVisible] = useState(false);\n    const [customize, setCustomize] = useState([]);\n    const [fixed, setFixed] = useState([]);\n    const [finalKmValue, setFinalKmValue] = useState(0);\n    const [namePlan, setNamePlan] = useState('');\n\n    const coberturas = [\n        { name: 'Alagamentos', cusFixed: false, valueKm: 0.02 },\n        { name: 'Assistência 24h', cusFixed: true, valueKm: 0.01 },\n        { name: 'Chaveiro', cusFixed: true, valueKm: 0.01 },\n        { name: 'Colisão de danos parciais', cusFixed: true, valueKm: 0.03 },\n        { name: 'Colisão de perda total', cusFixed: false, valueKm: 0.01 },\n        { name: 'Incêndio', cusFixed: false, valueKm: 0.02 },\n        { name: 'Proteção de danos materiais', cusFixed: false, valueKm: 0.02 }\n    ]\n\n    useEffect(() => {\n        let sum = 0;\n        coberturas.map((cobertura) => {\n            if (cobertura.cusFixed === true) {\n                fixed.push(cobertura)\n                sum = cobertura.valueKm + sum\n            }\n            customize.push(cobertura)\n        })\n        setFinalKmValue(sum);\n    }, [])\n\n    const addFixedCoverage = (valueKm, name) => {\n        setFinalKmValue(finalKmValue + valueKm)\n        setFixed([...fixed, { name, cusFixed: false, valueKm }])\n        const toppings = customize.filter((c) => c.name != name);\n\n        const sort = [...toppings, { name, cusFixed: true }].sort(function (a, b) {\n            if (a.name > b.name) return 1;\n            if (a.name < b.name) return -1;\n            return 0;\n        });\n\n        setCustomize(sort)\n    }\n\n    const removeFixedCovers = (valueKm, name) => {\n        const zero = finalKmValue - valueKm;\n        Math.sign(zero) != -1 ? setFinalKmValue(zero)\n            : setFinalKmValue(0)\n        const toppingsFixed = fixed.filter((c) => c.name != name);\n\n        setFixed(toppingsFixed);\n\n        const toppingsCustomize = customize.filter((c) => c.name != name);\n\n        const sort = [...toppingsCustomize, { name, cusFixed: false, valueKm }].sort(function (a, b) {\n            if (a.name > b.name) return 1;\n            if (a.name < b.name) return -1;\n            return 0;\n        });\n\n        setCustomize(sort)\n    }\n\n    return (\n        <>\n            <CButton\n                className='btn-save-global'\n                onClick={() => setVisible(!visible)}\n            >\n                Editar\n            </CButton>\n            <CModal\n                alignment=\"center\"\n                size='xl'\n                visible={visible}\n                onClose={() => setVisible(false)}\n            >\n                <CModalHeader>\n                    <CModalTitle className=\"title-modal\">Editar Plano</CModalTitle>\n                </CModalHeader>\n                <CModalBody>\n                    <CRow>\n                        <CCol>\n                            <CForm>\n                                <CFormLabel\n                                    htmlFor=\"name-plan\"\n                                >\n                                    Nome do plano\n                                </CFormLabel>\n                                <CFormInput\n                                    id=\"name-plan\"\n                                    type=\"text\"\n                                    placeholder=\"Plano principal\"\n                                    className='inputs-edit-plan'\n                                    onChange={({ target }) => setNamePlan(target.value)}\n                                />\n                            </CForm>\n                        </CCol>\n                        <CCol>\n                            <CForm>\n                                <CFormLabel\n                                    htmlFor=\"value-km-plan\"\n                                >\n                                    Valor do km (R$)\n                                </CFormLabel>\n                                <CFormInput\n                                    id=\"value-km-plan\"\n                                    label=\"Valor do km (R$)\"\n                                    type=\"text\" placeholder=\"R$ 0,06\"\n                                    className='inputs-edit-plan'\n                                    value={`R$ ${finalKmValue.toFixed(2).replace('.', ',')}`}\n                                    disabled\n                                />\n                            </CForm>\n                        </CCol>\n                    </CRow>\n                    <CRow>\n                        <CCol className='mt-4'>\n                            <p>Selecione as coberturas para o plano:</p>\n                            <p>COBERTURAS FIXAS</p>\n                            <CRow xs={{ cols: 4 }} className=\"p-2\">\n                                {fixed ? fixed.map(({ name, valueKm }, key) => (\n                                    <CCol key={key} className='check-plan my-1 py-2'>\n                                        <CFormCheck\n                                            id={`${name}-fixed`}\n                                            value={name}\n                                            label={name}\n                                            onChange={() => removeFixedCovers(valueKm, name)}\n                                            checked\n                                        />\n                                    </CCol>\n                                )) : null}\n                            </CRow>\n                        </CCol>\n                        <CRow>\n                            <CCol className='mt-2'>\n                                <p>COBERTURAS CUSTOMIZÁVEIS</p>\n                                <CRow xs={{ cols: 4 }} className=\"p-2\">\n                                    {customize ? customize.map(({ name, cusFixed, valueKm }, key) => (\n                                        <CCol key={key} className='check-plan my-1 py-2'>\n                                            <CFormCheck\n                                                id={`${name}-customize`}\n                                                value={name}\n                                                label={name}\n                                                onChange={() => addFixedCoverage(valueKm, name)}\n                                                disabled={cusFixed}\n                                                checked={cusFixed}\n                                            />\n                                        </CCol>\n                                    )) : null}\n                                </CRow>\n                            </CCol>\n                        </CRow>\n                    </CRow>\n                </CModalBody>\n                <CModalFooter>\n                    <CButton\n                        className=\"btn-cancel-global\"\n                        variant='outline'\n                        onClick={() => setVisible(false)}\n                    >\n                        Cancelar\n                    </CButton>\n                    <CButton\n                        onClick={() => savePlan(\n                            namePlan,\n                            finalKmValue,\n                            customize,\n                            fixed,\n                        )}\n                        className=\"btn-save-global\"\n                    >\n                        Salvar\n                    </CButton>\n                </CModalFooter>\n            </CModal>\n        </>\n    )\n}\n\nexport default BtnEditPlan;\n","import React, { useState } from 'react';\nimport { CCol, CForm, CFormInput, CFormLabel, CFormSelect, CRow } from '@coreui/react';\n\nimport '../../css/activeAndInactive.css';\nimport BtnEditPlan from '../btn/BtnEditPlan';\n\nfunction ActiveAndInactivePlan() {\n    const [op1, setOp1] = useState(true);\n    const [op2, setOp2] = useState(false);\n\n    const choiceActive = () => {\n        setOp1(true), setOp2(false)\n    };\n    const choiceInactive = () => {\n        setOp1(false), setOp2(true)\n    };\n\n    return (\n        <>\n            <CRow>\n                <CCol\n                    className={\n                        op1 === true\n                            ? \"nav-plan-active-active\"\n                            : \"nav-plan-active\"\n                    }\n                    onClick={choiceActive}\n                >\n                    <label>Plano ativo</label>\n                </CCol>\n                <CCol\n                    className={\n                        op2 === true\n                            ? \"nav-plan-inactive-active\"\n                            : \"nav-plan-inactive\"\n                    }\n                    onClick={choiceInactive}\n                >\n                    <label>Plano inativo</label>\n                </CCol>\n                <CCol></CCol>\n                <CCol></CCol>\n            </CRow>\n            <br />\n            {op1 === true ? (\n                <>\n                    <CRow className=\"my-4\">\n                        <CCol>\n                            <CForm>\n                                <CFormLabel\n                                    htmlFor=\"name-plan\"\n                                >\n                                    Nome do plano\n                                </CFormLabel>\n                                <CFormInput\n                                    id=\"name-plan\"\n                                    type=\"text\"\n                                    placeholder=\"Plano principal\"\n                                    readOnly\n                                />\n                            </CForm>\n                        </CCol>\n                        <CCol>\n                            <CForm>\n                                <CFormLabel\n                                    htmlFor=\"value-km-plan\"\n                                >\n                                    Valor do km (R$)\n                                </CFormLabel>\n                                <CFormInput\n                                    id=\"value-km-plan\"\n                                    label=\"Valor do km (R$)\"\n                                    type=\"text\" placeholder=\"R$ 0,06\"\n                                    readOnly\n                                />\n                            </CForm>\n                        </CCol>\n                    </CRow>\n                    <CRow className=\"my-4\">\n                        <CCol>\n                            <CForm>\n                                <CFormLabel\n                                    htmlFor=\"toppings-included-plan\"\n                                >\n                                    Coberturas inclusas no plano\n                                </CFormLabel>\n                                <CFormSelect\n                                    id=\"toppings-included-plan\"\n                                    size=\"lg\"\n                                    className=\"form-select\"\n                                    multiple\n                                    disabled\n                                >\n                                    <option value=\"1\">Roubo e furto</option>\n                                    <option value=\"2\">Assistência 24h</option>\n                                    <option value=\"3\">Incêndio</option>\n                                    <option value=\"4\">Alagamentos</option>\n                                    <option value=\"5\">Reboque</option>\n                                    <option value=\"6\">Colisão de perda total</option>\n                                </CFormSelect>\n                            </CForm>\n                        </CCol>\n                        <CCol>\n                            <CForm>\n                                <CFormLabel\n                                    htmlFor=\"customizable-coverage-plan\"\n                                >\n                                    Coberturas customizáveis no plano\n                                </CFormLabel>\n                                <CFormSelect\n                                    id=\"customizable-coverage-plan\"\n                                    size=\"lg\"\n                                    multiple\n                                    disabled\n                                >\n                                    <option value=\"1\"> Colisão de danos parciais</option>\n                                    <option value=\"2\">Proteção de danos materiais</option>\n                                    <option value=\"3\">Cobertura de vidros</option>\n                                    <option value=\"4\">Chaveiro</option>\n                                </CFormSelect>\n                            </CForm>\n                        </CCol>\n                    </CRow>\n                    <BtnEditPlan />\n                </>\n            ) : null}\n\n            {/* {op2 === true ? () : null}*/}\n        </>\n    )\n}\n\nexport default  ActiveAndInactivePlan","import React from 'react';\nimport { CCard, CCardBody, CCol, CRow } from '@coreui/react';\n\nimport ImputSearch from './imput/ImputSearch';\nimport ActiveAndInactivePlan from './components/ActiveAndInactivePlan';\n\nfunction AddPlans() {\n    return (\n        <CCard className='card'>\n            <CCardBody>\n                <CRow>\n                    <CCol>\n                        <label className=\"plan-title\">Planos</label >\n                    </CCol>\n                    <CCol className=''>\n                        <ImputSearch />\n                    </CCol>\n                </CRow>\n                <br />\n                <CRow>\n                    <CCol>\n                        <ActiveAndInactivePlan />\n                    </CCol>\n                </CRow>\n            </CCardBody>\n        </CCard>\n    )\n}\n\nexport default  AddPlans","import React from 'react';\nimport { CCol, CRow } from '@coreui/react';\n\nimport GraphicPlan from './render/GraphicPlan';\nimport Scratchs from './render/Scratchs';\nimport AddPlans from './render/AddPlans';\n\nconst Plans = () => {\n    return (\n        <>\n            <CRow>\n                <CCol xs={4}>\n                    <GraphicPlan />\n                </CCol>\n                <CCol xs={8}>\n                    <Scratchs />\n                </CCol>\n            </CRow>\n            <br />\n            <CRow>\n                <CCol>\n                    <AddPlans />\n                </CCol>\n            </CRow>\n        </>\n    )\n}\n\nexport default  Plans;\n"],"sourceRoot":""}