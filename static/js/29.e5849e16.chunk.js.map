{"version":3,"sources":["views/components/MonthYear.jsx","views/calls/btns/ButtonGraph.jsx","views/calls/render/Calls.jsx","views/calls/btns/ButtonCalls.jsx","views/calls/render/CallsQTD.jsx","views/calls/render/CallsBranch.jsx","views/calls/render/Channel.jsx","views/calls/render/CallsPerformance.jsx","views/calls/render/CalendarAtts.jsx","views/calls/Call.jsx"],"names":["MonthYear","year","Date","getFullYear","month","getMonth","ButtonGraph","alignment","color","caret","className","icon","cilOptions","content","map","name","index","variant","onClick","console","log","placement","disabled","Calls","random","min","max","Math","floor","type","data","labels","datasets","label","backgroundColor","borderColor","pointBorderColor","options","maintainAspectRatio","plugins","legend","position","display","scales","x","grid","drawOnChartArea","y","ticks","beginAtZero","maxTicksLimit","stepSize","ceil","elements","line","point","radius","hitRadius","hoverRadius","hoverBorderWidth","ButtonCalls","CallsQTD","CallsBranch","barPercentage","Channel","CallsPerformance","useState","protocolo","status","funcionario","cliente","atendimentos","dados","setBusca","href","onChange","e","target","value","placeholder","striped","hover","scope","item","toString","CalendarAtts","hora","atualizacoes","Call","xs"],"mappings":"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","file":"static/js/29.e5849e16.chunk.js","sourcesContent":["import React from 'react'\n\nfunction MonthYear() {\n    const year = new Date().getFullYear()\n    const month = new Date().getMonth()\n\n    const monthName = {\n        0: 'Janeiro',\n        1: 'Fevereiro',\n        2: 'Março',\n        3: 'Abril',\n        4: 'MAio',\n        5: 'Junho',\n        6: 'Julho',\n        7: 'Agosto',\n        8: 'Setembro',\n        9: 'Outubro',\n        10: 'Novembro',\n        11: 'Dezembro',\n    };\n  return (\n    <label>{monthName[month]} {year}</label>\n  )\n}\n\nexport default MonthYear;\n","import React from 'react';\nimport CIcon from '@coreui/icons-react';\nimport { cilOptions } from '@coreui/icons';\nimport {\n    CButton,\n    CDropdown,\n    CDropdownItem,\n    CDropdownMenu,\n    CDropdownToggle,\n    CPopover,\n} from '@coreui/react';\n\nconst ButtonGraph = () => {\n    const month = [\n        'Janeiro',\n        'Fevereiro',\n        'Março',\n        'Abril',\n        'MAio',\n        'Junho',\n        'Julho',\n        'Agosto',\n        'Setembro',\n        'Outubro',\n        'Novembro',\n        'Dezembro',\n    ];\n\n    return (\n        <CDropdown alignment=\"end\">\n            <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n                <CIcon icon={cilOptions} />\n            </CDropdownToggle>\n            <CDropdownMenu>\n                <CPopover\n                    content={\n                        <>\n                            {month.map((name, index) => (\n                                <div key={index}>\n                                    <CButton\n                                        color=\"link\"\n                                        variant=\"outline\"\n                                        onClick={() =>\n                                            console.log('Funcionouuuuuuu')\n                                        }\n                                    >\n                                        {name}\n                                    </CButton>\n                                    <br />\n                                </div>\n                            ))}\n                        </>\n                    }\n                    placement=\"left\"\n                >\n                    <CDropdownItem color=\"link\">Alterar mês</CDropdownItem>\n                </CPopover>\n                <CDropdownItem\n                // onClick={() => setVisibleReport(true)}\n                >\n                    Gerar relátorio\n                </CDropdownItem>\n                <CDropdownItem\n                // onClick={() => setVisibleGraphic(true)}\n                >\n                    Editar gráfico...\n                </CDropdownItem>\n                <CDropdownItem disabled>Mais Ferramentas</CDropdownItem>\n            </CDropdownMenu>\n        </CDropdown>\n    );\n};\n\nexport default ButtonGraph;\n","import React from 'react';\nimport { CChart } from '@coreui/react-chartjs';\nimport { CCol, CCard, CCardBody, CRow } from '@coreui/react';\n\nimport ButtonGraph from '../btns/ButtonGraph';\nimport MonthYear from 'src/views/components/MonthYear';\n\nconst Calls = () => {\n    const random = (min, max) => {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    };\n\n    return (\n        <CCard className=\"card-call\">\n            <CCardBody>\n                <CRow>\n                    <CCol>\n                        <label className=\"call-title\">Comparativo</label>\n                        <br />\n                        <MonthYear />\n                    </CCol>\n                    <CCol className=\"btn-filter-call\">\n                        <ButtonGraph />\n                    </CCol>\n                </CRow>\n                <CChart\n                    type=\"line\"\n                    data={{\n                        labels: ['Sem 1', 'Sem 2', 'Sem 3', 'Sem 4', 'Sem 5'],\n                        datasets: [\n                            {\n                                label: 'Atendimentos abertos',\n                                backgroundColor: '#5F7ADA',\n                                borderColor: '#5F7ADA',\n                                pointBorderColor: '#fff',\n                                data: [\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                ],\n                            },\n                            {\n                                label: 'Atendimentos encerrados',\n                                backgroundColor: '#99E9F4',\n                                borderColor: '#99E9F4',\n                                pointBorderColor: '#fff',\n                                data: [\n                                    random(50, 250),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                ],\n                            },\n                        ],\n                    }}\n                    options={{\n                        maintainAspectRatio: false,\n                        plugins: {\n                            legend: {\n                                position: 'bottom',\n                                display: true,\n                            },\n                        },\n                        scales: {\n                            x: {\n                                grid: {\n                                    drawOnChartArea: false,\n                                },\n                            },\n                            y: {\n                                ticks: {\n                                    beginAtZero: true,\n                                    maxTicksLimit: 5,\n                                    stepSize: Math.ceil(250 / 5),\n                                    max: 250,\n                                },\n                            },\n                        },\n                        elements: {\n                            line: {\n                                // tension: 0.2,\n                            },\n                            point: {\n                                radius: 0,\n                                hitRadius: 10,\n                                hoverRadius: 4,\n                                hoverBorderWidth: 3,\n                            },\n                        },\n                    }}\n                    className=\"chart-line-call\"\n                />\n            </CCardBody>\n        </CCard>\n    );\n};\n\nexport default Calls;\n","import React from 'react';\nimport CIcon from '@coreui/icons-react';\nimport { cilOptions } from '@coreui/icons';\nimport {\n    CButton,\n    CDropdown,\n    CDropdownItem,\n    CDropdownMenu,\n    CDropdownToggle,\n    CPopover,\n} from '@coreui/react';\n\nfunction ButtonCalls() {\n    const month = [\n        'Janeiro',\n        'Fevereiro',\n        'Março',\n        'Abril',\n        'MAio',\n        'Junho',\n        'Julho',\n        'Agosto',\n        'Setembro',\n        'Outubro',\n        'Novembro',\n        'Dezembro',\n    ];\n\n    return (\n        <CDropdown alignment=\"end\">\n            <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n                <CIcon icon={cilOptions} />\n            </CDropdownToggle>\n            <CDropdownMenu>\n                <CPopover\n                    content={\n                        <>\n                            {month.map((name, index) => (\n                                <div key={index}>\n                                    <CButton\n                                        color=\"link\"\n                                        variant=\"outline\"\n                                        onClick={() =>\n                                            console.log('Funcionouuuuuuu')\n                                        }\n                                    >\n                                        {name}\n                                    </CButton>\n                                    <br />\n                                </div>\n                            ))}\n                        </>\n                    }\n                    placement=\"left\"\n                >\n                    <CDropdownItem color=\"link\">Alterar mês</CDropdownItem>\n                </CPopover>\n                <CDropdownItem\n                // onClick={() => setVisibleReport(true)}\n                >\n                    Gerar relátorio\n                </CDropdownItem>\n                <CDropdownItem\n                // onClick={() => setVisibleGraphic(true)}\n                >\n                    Gerar gráfico...\n                </CDropdownItem>\n                <CDropdownItem disabled>Mais Ferramentas</CDropdownItem>\n            </CDropdownMenu>\n        </CDropdown>\n    );\n}\n\nexport default ButtonCalls;\n","import React from 'react';\nimport { CCol, CCard, CCallout, CRow } from '@coreui/react';\n\nimport ButtonCalls from '../btns/ButtonCalls';\n\nconst CallsQTD = () => {\n    return (\n        <>\n            <CCard className=\"card-atend\">\n                <CCallout className=\"callout-call\" color=\"primary\">\n                    <CRow>\n                        <div className=\"btn-filter-call\">\n                            <ButtonCalls />\n                        </div>\n                        <CCol className=\"text-center\">\n                            <h2>55</h2>\n                            <label className=\"call-sub-title\">\n                                Atendimentos em Aberto\n                            </label>\n                        </CCol>\n                    </CRow>\n                </CCallout>\n            </CCard>\n            <br />\n            <CCard className=\"text-center card-atend\">\n                <CCallout className=\"callout-call\" color=\"info\">\n                    <CRow>\n                        <div className=\"btn-filter-call\">\n                            <ButtonCalls />\n                        </div>\n                        <CCol className=\"text-center\">\n                            <h2>25</h2>\n                            <label className=\"call-sub-title\">\n                                Atendimentos encerrados na última hora\n                            </label>\n                        </CCol>\n                    </CRow>\n                </CCallout>\n            </CCard>\n        </>\n    );\n};\n\nexport default CallsQTD;\n","import React from 'react';\nimport { CChart } from '@coreui/react-chartjs';\nimport { CCol, CCard, CCardBody, CRow } from '@coreui/react';\n\nimport ButtonRelatory from '../btns/ButtonGraph';\nimport MonthYear from 'src/views/components/MonthYear';\n\nconst CallsBranch = () => {\n    return (\n        <CCard className=\"card-call\">\n            <CCardBody>\n                <CRow>\n                    <CCol>\n                        <label className=\"call-title\">Comparativo</label>\n                        <br />\n                        <MonthYear />\n                    </CCol>\n                    <CCol className=\"btn-filter-call\">\n                        <ButtonRelatory />\n                    </CCol>\n                </CRow>\n                <CChart\n                    type=\"bar\"\n                    options={{\n                        plugins: {\n                            legend: {\n                                position: 'bottom',\n                            },\n                        },\n                    }}\n                    data={{\n                        labels: [\n                            'WhatsApp',\n                            'E-mail',\n                            'Chat',\n                            'Instagram',\n                            'Outro',\n                        ],\n                        datasets: [\n                            {\n                                label: 'Chamadas de clientes',\n                                backgroundColor: '#5F7ADA',\n                                barPercentage: 0.7,\n                                data: [40, 20, 12, 39, 10, 80],\n                            },\n                            {\n                                label: 'Chamadas de não clientes',\n                                backgroundColor: '#99E9F4',\n                                barPercentage: 0.7,\n                                data: [10, 45, 22, 19, 30, 40],\n                            },\n                        ],\n                    }}\n                    labels=\"months\"\n                />\n            </CCardBody>\n        </CCard>\n    );\n};\n\nexport default CallsBranch;\n","import React from 'react';\nimport { CChart } from '@coreui/react-chartjs';\nimport { CCol, CCard, CCardBody, CRow } from '@coreui/react';\n\nimport ButtonGraph from '../btns/ButtonGraph';\nimport MonthYear from 'src/views/components/MonthYear';\n\nconst Channel = () => {\n    return (\n        <CCard className=\"card-call\">\n            <CCardBody>\n                <CRow>\n                    <CCol>\n                        <label className=\"call-title\">Comparativo</label>\n                        <br />\n                        <MonthYear />\n                    </CCol>\n                    <CCol className=\"btn-filter-call\">\n                        <ButtonGraph />\n                    </CCol>\n                </CRow>\n                <CChart\n                    type=\"doughnut\"\n                    options={{\n                        plugins: {\n                            legend: {\n                                position: 'bottom',\n                            },\n                        },\n                    }}\n                    data={{\n                        datasets: [\n                            {\n                                backgroundColor: [\n                                    '#EB9B00',\n                                    '#E7E6E6',\n                                    '#B836F5',\n                                    '#96BAF1',\n                                    '#C9F196',\n                                ],\n                                data: [40, 20, 80, 10, 5],\n                            },\n                        ],\n                        labels: [\n                            'Chat do aplicativo',\n                            'E-mail',\n                            'Instagram',\n                            'Whatsapp',\n                            'Outro',\n                        ],\n                    }}\n                />\n            </CCardBody>\n        </CCard>\n    );\n};\n\nexport default Channel;\n","import React, { useState } from 'react';\nimport {\n    CTable,\n    CTableBody,\n    CTableDataCell,\n    CTableRow,\n    CCard,\n    CCardBody,\n    CTableHead,\n    CTableHeaderCell,\n    CNavbar,\n    CFormInput,\n    CNavbarBrand,\n} from '@coreui/react';\n\nimport { BiSearchAlt2 } from 'react-icons/bi';\n\nconst CallsPerformance = () => {\n    const [atendimentos, setAtendimentos] = useState([\n        {\n            protocolo: 123456,\n            data: '12/12/2012',\n            status: 'Encerrado',\n            funcionario: 'Paulo Jorge',\n            cliente: 'sim ',\n        },\n        {\n            protocolo: 454654,\n            data: '22/02/2022',\n            status: 'Em Aberto',\n            funcionario: 'Paula Leticia',\n            cliente: 'Não ',\n        },\n        {\n            protocolo: 4798947,\n            data: '28/10/2022',\n            status: 'Em Aberto',\n            funcionario: 'Afranio Alcantara',\n            cliente: 'Não ',\n        },\n    ]);\n    const [dados, setDados] = useState(atendimentos);\n    const [busca2, setBusca] = useState('');\n\n    // const dados2 = [];\n    // let busca;\n\n    const pegandoBusca = (e) => {\n        setBusca(e.target.value);\n    };\n\n    // const BuscaUser = () => {\n    //     let auxBusca = busca.toLocaleLowerCase();\n    //     atendimentos.map((item) => {\n    //         let auxStatus = item.status.toLocaleLowerCase(); // ALTERAR AQUI DE ACORDO COM OS CAMPOS DA API\n    //         let auxFunc = item.funcionario.toLocaleLowerCase(); // ALTERAR AQUI DE ACORDO COM OS CAMPOS DA API\n    //         if (auxStatus.includes(auxBusca) || auxFunc.includes(auxBusca)) {\n    //             dados2.push(item);\n    //             setDados(dados2);\n    //         }\n    //     });\n    // };\n\n    return (\n        <CCard className=\"card-protocolo-call\">\n            <CCardBody>\n                <CNavbar>\n                    <CNavbarBrand href=\"#\"></CNavbarBrand>\n                    <div>\n                        <div className=\"container-icon-input float-end mb-3\">\n                            <i className=\"icon-search-global i-absolute-global\">\n                                <BiSearchAlt2 color=\"#6D6D6D\" />\n                            </i>\n                            <CFormInput\n                                type=\"search\"\n                                className=\"input-search-global\"\n                                onChange={pegandoBusca}\n                                placeholder=\"Pesquisar\"\n                            />\n                        </div>\n                    </div>\n                </CNavbar>\n                <CTable striped hover>\n                    <CTableHead>\n                        <CTableRow>\n                            <CTableHeaderCell scope=\"col\">\n                                Protocolo\n                            </CTableHeaderCell>\n                            <CTableHeaderCell scope=\"col\">\n                                Data\n                            </CTableHeaderCell>\n                            <CTableHeaderCell scope=\"col\">\n                                Status\n                            </CTableHeaderCell>\n                            <CTableHeaderCell scope=\"col\">\n                                Funcionário\n                            </CTableHeaderCell>\n                            <CTableHeaderCell scope=\"col\">\n                                Cliente\n                            </CTableHeaderCell>\n                        </CTableRow>\n                    </CTableHead>\n                    <CTableBody>\n                        {dados.map((item, index) => (\n                            <CTableRow key={index.toString()}>\n                                <CTableDataCell>\n                                    {item.protocolo}\n                                </CTableDataCell>\n                                <CTableDataCell>{item.data}</CTableDataCell>\n                                <CTableDataCell>{item.status}</CTableDataCell>\n                                <CTableDataCell>\n                                    {item.funcionario}\n                                </CTableDataCell>\n                                <CTableDataCell>{item.cliente}</CTableDataCell>\n                            </CTableRow>\n                        ))}\n                    </CTableBody>\n                </CTable>\n            </CCardBody>\n        </CCard>\n    );\n};\n\nexport default CallsPerformance;\n","import React, { useState } from 'react';\nimport Calendar from 'react-calendar';\nimport {\n    CTable,\n    CTableBody,\n    CTableDataCell,\n    CTableRow,\n    CCard,\n    CCardBody,\n} from '@coreui/react';\n\nimport 'react-calendar/dist/Calendar.css';\n\nconst CalendarAtts = () => {\n    const [value, onChange] = useState(new Date());\n    const [atualizacoes, setAtualizacoes] = useState([\n        {\n            protocolo: '23232',\n            status: 'Aberto',\n            data: '12/01/2022',\n            hora: '12:20',\n        },\n        {\n            protocolo: '23562',\n            status: 'Encerrado',\n            data: '12/01/2022',\n            hora: '12:30',\n        },\n        {\n            protocolo: '89032',\n            status: 'Aberto',\n            data: '12/01/2022',\n            hora: '12:50',\n        },\n    ]);\n\n    return (\n        <CCard className=\"card-calender-call\">\n            <CCardBody>\n                <Calendar\n                    onChange={onChange}\n                    value={value}\n                    className=\"calender\"\n                />\n                <hr />\n                <label>Atualizações</label>\n                <CTable>\n                    <CTableBody>\n                        {atualizacoes.map((item, index) => (\n                            <CTableRow key={index.toString()}>\n                                <CTableDataCell>\n                                    {item.protocolo}\n                                </CTableDataCell>\n                                <CTableDataCell>{item.status}</CTableDataCell>\n                                <CTableDataCell className=\"px-0\">\n                                    {`${item.data} às ${item.hora}`}\n                                </CTableDataCell>\n                            </CTableRow>\n                        ))}\n                    </CTableBody>\n                </CTable>\n            </CCardBody>\n        </CCard>\n    );\n};\n\nexport default CalendarAtts;\n","import React from 'react';\nimport { CCol, CRow } from '@coreui/react';\n\nimport Calls from './render/Calls';\nimport CallsQTD from './render/CallsQTD';\nimport CallsBranch from './render/CallsBranch';\nimport Channel from './render/Channel';\nimport CallsPerformance from './render/CallsPerformance';\nimport CalendarAtts from './render/CalendarAtts';\n\nimport './css/call.css';\n\nconst Call = () => {\n    return (\n        <div className=\"mx-2\">\n            <CRow>\n                <CCol xs={8}>\n                    <Calls />\n                </CCol>\n                <CCol xs={4}>\n                    <CallsQTD />\n                </CCol>\n            </CRow>\n            <br />\n            <CRow>\n                <CCol xs={8}>\n                    <CallsBranch />\n                </CCol>\n                <CCol xs={4}>\n                    <Channel />\n                </CCol>\n            </CRow>\n            <br />\n            <CRow>\n                <CCol xs={8}>\n                    <CallsPerformance />\n                </CCol>\n                <CCol xs={4}>\n                    <CalendarAtts />\n                </CCol>\n            </CRow>\n        </div>\n    );\n};\n\nexport default Call;\n"],"sourceRoot":""}