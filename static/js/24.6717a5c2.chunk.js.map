{"version":3,"sources":["views/scratchs/render/UploadRisc.jsx","views/scratchs/Scratch.jsx"],"names":["UploadRiscBtn","props","handleClose","setShow","useState","show","token","Cookies","get","config","headers","salvarInfos","console","log","csv","reader","FileReader","onload","evt","bstr","target","result","wb","XLSX","type","wsname","SheetNames","ws","Sheets","data","sheet_to_csv","header","processData","readAsBinaryString","dataString","dataStringLines","split","list","i","length","row","obj","j","d","substring","Object","values","filter","x","push","columns","map","c","name","selector","setData","setColumns","e","setFlagSave","array","forEach","risco","to","replace","until","kRisk","exposition","axios","post","then","response","setCsv","parentCallback","catch","r","montaJson","flagSave","onClick","variant","color","Modal","onHide","size","className","Body","accept","required","onChange","files","Button","disabled","Spinner","animation","Footer","Riscos","dados","setDados","userType","useEffect","alert","window","location","reload","expand","fluid","UploadRisc","align","bordered","hover","responsive","active","item","index"],"mappings":"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","file":"static/js/24.6717a5c2.chunk.js","sourcesContent":["import {\n  CButton, CFormInput, CInputGroup\n} from '@coreui/react';\nimport axios from \"axios\";\nimport React, { useState } from 'react';\nimport { Button, Modal, Spinner } from 'react-bootstrap';\nimport * as XLSX from 'xlsx';\nimport Cookies  from 'js-cookie'\n\n\nconst UploadRiscBtn = (props) => {\n    const handleClose = () => setShow(false);\n    const [visible, setVisible] = useState(false)  \n    const [show, setShow] = useState(false);\n    const AbreModal = ()=>setShow(true)\n\n    const token = Cookies.get('TokenID')\n    const userType = Cookies.get('userType')\n    let config = {\n      headers: {\n        'Authorization': token, \n        'Content-Type': 'application/json;charset=UTF-8',\n        \"Access-Control-Allow-Origin\": \"*\",\n      }\n    };\n\n\n    const salvarInfos = () => {\n        console.log(csv)\n        const reader = new FileReader();\n        reader.onload = (evt) => {\n        // pega valores\n        const bstr = evt.target.result;\n        const wb = XLSX.read(bstr, { type: 'binary' });\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        // converte o array\n        const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n        processData(data); // processa dados, dividindo\n        };\n        reader.readAsBinaryString(csv);\n        \n    }\n\n    // Separa campos\n  const processData = dataString => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n \n    const list = [];\n    for (let i = 1; i < dataStringLines.length; i++) {\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n      if (headers && row.length == headers.length) {\n        const obj = {};\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n          if (d.length > 0) {\n            if (d[0] == '\"')\n              d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] == '\"')\n              d = d.substring(d.length - 2, 1);\n          }\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        }\n \n        if (Object.values(obj).filter(x => x).length > 0) {\n          list.push(obj);\n        }\n      }\n    }\n \n    const columns = headers.map(c => ({\n      name: c,\n      selector: c,\n    }));\n \n    setData(list);\n    setColumns(columns);\n    montaJson(list)\n  }\n\n  // monta json e envia pro banco \n  function montaJson(e){\n    setFlagSave(true)     \n     \n   let array = []  \n    e.forEach(risco =>{\n      var to = risco.to.replace(/[^0-9,]/g, '');\n      var until = risco.until.replace(/[^0-9,]/g, '');\n      array.push({\n        to: to.replace(',', '.'),\n        until: until.replace(',', '.'),\n        kRisk: risco.kRisk.replace(',', '.'), //parseFloat(risco.kRisk.replace(',', '.')),\n        exposition: risco.exposition.replace(',', '.'),\n      })\n    })\n    \n    console.log('valores atts',array)\n\n    axios \n      .post(\"http://dashboardbff.oonpayperuse.com.br/plansService/risks\", array ,config)\n      .then((response) => {\n           console.log('Enviado...', response)\n           setCsv()\n           setFlagSave(false)   \n           props.parentCallback(true)  \n           setShow(false);\n       })\n       .catch(r =>{ console.log('erro na api....', r)}) \n\n  }\n\n    const [columns, setColumns] = useState([]);\n    const [data, setData] = useState([]);\n    const [csv, setCsv] = useState()\n    const [flagSave, setFlagSave] = useState(false)\n\n    return (\n        <> \n            <CButton  onClick={AbreModal} variant='outline'  color=\"dark\" >\n                Atualizar valores \n            </CButton>\n\n            <Modal \n              show={show} \n              onHide={handleClose}\n              size=\"xl\"\n              className='container-btn-risc'\n            >\n              <Modal.Body>\n                  <h3>Atualizar planilha </h3>\n                  <br />\n                  <p>Atualizar valores de risco por meio de uma planilha .CSV.</p>\n                  \n                  <CInputGroup className=\"mb-3\">\n                      <CFormInput type=\"file\" accept=\".csv\" required onChange={ (e) => {setCsv(e.target.files[0])} }  />\n                  </CInputGroup> \n                  \n                  {csv == null  ? \n                      (\n                          <Button variant=\"secondary\" disabled variant=\"ghost\" onClick={salvarInfos}>\n                              Salvar\n                          </Button>\n                      )\n                      : null\n                  } \n\n                  {csv != null && flagSave == false  ? \n                      (\n                          <Button variant=\"secondary\"  onClick={salvarInfos}>\n                              Salvar\n                          </Button>\n                      )\n                      : null\n                  }  \n\n                  {csv != null && flagSave != false ? \n                      (\n                        <h4> <Spinner animation=\"grow\" variant=\"info\" />  </h4> \n                      )\n                      : null\n                  }\n\n                  {/* <Button variant=\"secondary\" onClick={salvarInfos}>\n                      Salvar\n                  </Button> */}\n                      \n              </Modal.Body>\n                    \n              <Modal.Footer>\n                  <Button variant=\"secondary\" onClick={handleClose}>\n                      Sair\n                  </Button>\n                  \n              </Modal.Footer>\n                    \n            </Modal>\n        </>\n    )\n}\n\nexport default UploadRiscBtn","import React, { useState, useEffect, useMemo } from 'react'\nimport axios  from \"axios\"\n\nimport './scratch.css'\nimport {\n  CButton,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CContainer,\n  CTableRow,\n  CNavbar,\n  CCollapse,\n  CNavLink ,\n  CNavbarBrand,\n  CNavbarNav,\n  CNavbarToggler,\n  CNavItem,\n  CCard,\n  CCardBody,\n  CFormInput,\n  CForm,\n  CPagination,\n  CPaginationItem,\n} from '@coreui/react'\n\nimport CIcon from '@coreui/icons-react'\nimport {cilLoopCircular, cilMagnifyingGlass, cilChevronRight, cilChevronLeft } from '@coreui/icons'\nimport { Spinner }  from 'react-bootstrap';\nimport UploadRiscBtn from './render/UploadRisc'\nimport Cookies from 'js-cookie'\nconst Riscos = () => {\n\n  const [dados, setDados] = useState([])\n\n  const token = Cookies.get('TokenID')\n  const userType = Cookies.get('userType')\n  let config = {\n    headers: {\n      'Authorization': token, \n      'Content-Type': 'application/json;charset=UTF-8',\n      \"Access-Control-Allow-Origin\": \"*\",\n    }\n  };\n\n   function attPage(){\n    \n    setDados([])\n\n    axios \n      .get(\"http://dashboardbff.oonpayperuse.com.br/plansService/risks\", config)\n      .then((response) => {\n          setDados(response.data)\n      })\n      .catch(r =>{ \n        console.log('error', r), alert('Login expirado'),window.location.reload()\n      })\n  }\n\n  useEffect( ()=>{\n     axios \n      .get(\"http://dashboardbff.oonpayperuse.com.br/plansService/risks\", config)\n      .then((response) => {\n          setDados(response.data)\n      })\n      .catch(r =>{ \n        console.log('error', r), alert('Login expirado'),window.location.reload()\n      })\n  }, []) \n\n  \n  if (dados == ''){\n    return (\n        <h4> <Spinner animation=\"grow\" variant=\"info\" />  </h4> \n      )\n  }else{\n    return (\n      <div>\n\n        <CCard className='container-risco'>\n            <CCardBody>\n              <CNavbar expand=\"lg\"  className=\"menuUser\">\n                      <CContainer fluid>\n                      <CNavbarToggler\n                          aria-label=\"Toggle navigation\"\n                          // aria-expanded={visible}\n                          // onClick={() => setVisible(!visible)}\n                      />\n                      <CCollapse className=\"navbar-collapse\" >\n                          {/* <CIcon icon={cilUser } size=\"xl\"/> */}\n                          <CNavbarBrand> <h4> Riscos </h4>   </CNavbarBrand>\n                          <CNavbarNav className=\"me-auto mb-2 mb-lg-0\">\n                          </CNavbarNav>\n\n                          {userType == \"ADMIN\" ? \n                              ( <UploadRiscBtn parentCallback={attPage} />)\n                            :null\n\n                          }\n                         \n\n                      </CCollapse>\n                      </CContainer>\n                  </CNavbar>\n\n              <CTable align=\"middle\" className=\" container-table-risc \" bordered hover  responsive>\n                {/* Cabeca head da tabela do clientes */}\n                <CTableHead >\n                  <CTableRow active>\n                    <CTableHeaderCell  className=\"text-center\">Valor Minímo do veículo</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Valor máximo  do Veículo</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Constante de Risco</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\"> Varíavel de exposição </CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n\n                <CTableBody>\n                  { dados.map((item, index) => {\n                    return ( \n                          <CTableRow>\n                              <CTableDataCell  className=\"valorMin\">\n                                  <p> R$ {item.to} </p>\n                              </CTableDataCell>\n\n                              <CTableDataCell color='secondary'  className=\"text-center\">\n                                  <p> R$ {item.until} </p>\n                              </CTableDataCell>\n\n                              <CTableDataCell className=\"text-center\">\n                                  <p> {item.kRisk } </p>\n                              </CTableDataCell>\n\n                              <CTableDataCell color='secondary' className=\"text-center\">\n                                  <p> {item.exposition} </p>\n                              </CTableDataCell>\n                          \n                          </CTableRow> \n                      )\n                  })}\n\n                </CTableBody> \n              </CTable>\n              <br />\n                  \n            </CCardBody>\n        </CCard>\n\n        \n        </div>\n    )\n  }\n  \n}\n\nexport default Riscos"],"sourceRoot":""}