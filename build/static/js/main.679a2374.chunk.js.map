{"version":3,"sources":["App.jsx","serviceWorker.js","store.js","index.js"],"names":["loading","className","DefaultLayout","React","lazy","Login","App","useState","flag","setFlag","useEffect","token","localStorage","getItem","console","log","config","headers","axios","post","then","res","catch","err","Suspense","fallback","path","name","render","props","Boolean","window","location","hostname","match","initialState","sidebarShow","store","createStore","state","type","rest","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yiEAKMA,EACJ,qBAAKC,UAAU,mBAAf,SACE,qBAAKA,UAAU,kCAKbC,EAAgBC,IAAMC,MAAK,kBAAM,6EAGjCC,EAAQF,IAAMC,MAAK,kBAAM,sEAmEhBE,EA5DH,WAEV,MAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAmCA,OAhCAC,qBAAU,WAER,IAAMC,EAAQC,aAAaC,QAAQ,WACnCC,QAAQC,IAAI,kBAAkBJ,GAC9B,IAAMK,EAAS,CACbC,QAAS,CACL,cAAiBN,EACjB,eAAgB,iCAChB,8BAA+B,MAKrCO,IACGC,KAAK,kEACJR,EACAK,GAEDI,MAAK,SAACC,GACLP,QAAQC,IAAI,YAAaM,GAEzBZ,GAAQ,MAGTa,OAAM,SAACC,GACNT,QAAQC,IAAI,cAAeQ,QAG/B,IAIS,GAARf,EAEC,cAAC,IAAD,UACE,cAAC,IAAMgB,SAAP,CAAgBC,SAAUzB,EAA1B,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAQ0B,KAAK,IAAIC,KAAK,OAAOC,OAAQ,SAACC,GAAD,OAAW,cAAC3B,EAAD,eAAmB2B,aAOzE,cAAC,IAAD,UACE,cAAC,IAAML,SAAP,CAAgBC,SAAUzB,EAA1B,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAO0B,KAAK,IAAIC,KAAK,aAAaC,OAAQ,SAACC,GAAD,OAAW,cAACxB,EAAD,eAAWwB,cChExDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,0CCb7BC,EAAe,CACnBC,aAAa,GAYTC,EAAQC,aATM,WAA8C,IAA7CC,EAA4C,uDAApCJ,EAAoC,yCAApBK,EAAoB,EAApBA,KAASC,EAAW,iBAC/D,MACO,QADCD,EAEG,2BAAKD,GAAUE,GAEfF,KAKEF,ICPfK,IAASd,OACP,cAAC,IAAD,CAAUS,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFM,SAASC,eAAe,SFwGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAC4B,GAClCA,EAAaC,kB","file":"static/js/main.679a2374.chunk.js","sourcesContent":["import React, {useState, Component, useEffect } from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport './scss/style.scss'\nimport axios  from \"axios\"\n\nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n)\n\n// Containers s\nconst DefaultLayout = React.lazy(() => import('./layout/DefaultLayout')) // MUDAR AQUI\n\n// Pages\nconst Login = React.lazy(() => import('./views/pages/login/Login'))\n// const Register = React.lazy(() => import('./views/pages/register/Register'))\nconst Page404 = React.lazy(() => import('./views/pages/page404/Page404'))\nconst Page500 = React.lazy(() => import('./views/pages/page500/Page500'))\n\n\n\nconst App = () =>{\n\n  const [flag, setFlag] = useState(false)\n  \n\n  useEffect(()=> {\n    // pegar o token \n    const token = localStorage.getItem(\"TokenID\");\n    console.log('tokem em cash..',token)\n    const config = {\n      headers: { \n          'Authorization': token, \n          'Content-Type': 'application/json;charset=UTF-8',\n          \"Access-Control-Allow-Origin\": \"*\"\n      }\n    }\n\n      // requisito login\n    axios\n      .post('http://dashboardbff.oonpayperuse.com.br:8080/dashboardbff/login', \n        token,\n        config\n      )\n      .then((res) => {\n        console.log('resultado', res)\n        // tinha que analisar o resultado dessa requisicao, depois redirecionar\n        setFlag(true)\n\n      })\n      .catch((err) => {\n        console.log(\"Err Token: \", err);\n        // setFlag(true)\n      })\n  },[])\n\n  \n\n  if(flag == true){\n    return (\n      <HashRouter>\n        <React.Suspense fallback={loading}>\n          <Switch>\n            <Route  path=\"/\" name=\"Home\" render={(props) => <DefaultLayout {...props} />} />\n         </Switch>\n        </React.Suspense>\n      </HashRouter>\n    )\n  }else{\n    return (\n      <HashRouter>\n        <React.Suspense fallback={loading}>\n          <Switch>\n            <Route path=\"/\" name=\"Login Page\" render={(props) => <Login {...props} />} />\n          </Switch>\n        </React.Suspense>\n      </HashRouter>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import { createStore } from 'redux'\n\nconst initialState = {\n  sidebarShow: true,\n}\n\nconst changeState = (state = initialState, { type, ...rest }) => {\n  switch (type) {\n    case 'set':\n      return { ...state, ...rest }\n    default:\n      return state\n  }\n}\n\nconst store = createStore(changeState)\nexport default store\n","import 'react-app-polyfill/stable'\nimport 'core-js'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}